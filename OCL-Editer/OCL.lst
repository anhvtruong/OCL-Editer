
// ==========================================================================
//  GPPG error listing for yacc source file <OCL.y - 23.10.2019 12:34:29>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  vant
//  DateTime: 23.10.2019 12:36:27
//  UserName: yuri
// ==========================================================================


/* This GPPG file was machine-generated by BNFC */

%namespace OCL
%{

  OCL.Absyn.OCLfile YY_RESULT_OCLfile_ = null;
  public OCL.Absyn.OCLfile ParseOCLfile()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLfile_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListOCLPackage YY_RESULT_ListOCLPackage_ = null;
  public OCL.Absyn.ListOCLPackage ParseListOCLPackage()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListOCLPackage_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLPackage YY_RESULT_OCLPackage_ = null;
  public OCL.Absyn.OCLPackage ParseOCLPackage()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLPackage_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PackageName YY_RESULT_PackageName_ = null;
  public OCL.Absyn.PackageName ParsePackageName()
  {
    if(this.Parse())
    {
      return YY_RESULT_PackageName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLExpressions YY_RESULT_OCLExpressions_ = null;
  public OCL.Absyn.OCLExpressions ParseOCLExpressions()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLExpressions_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListConstrnt YY_RESULT_ListConstrnt_ = null;
  public OCL.Absyn.ListConstrnt ParseListConstrnt()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListConstrnt_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Constrnt YY_RESULT_Constrnt_ = null;
  public OCL.Absyn.Constrnt ParseConstrnt()
  {
    if(this.Parse())
    {
      return YY_RESULT_Constrnt_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListConstrBody YY_RESULT_ListConstrBody_ = null;
  public OCL.Absyn.ListConstrBody ParseListConstrBody()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListConstrBody_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ConstrBody YY_RESULT_ConstrBody_ = null;
  public OCL.Absyn.ConstrBody ParseConstrBody()
  {
    if(this.Parse())
    {
      return YY_RESULT_ConstrBody_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ContextDeclaration YY_RESULT_ContextDeclaration_ = null;
  public OCL.Absyn.ContextDeclaration ParseContextDeclaration()
  {
    if(this.Parse())
    {
      return YY_RESULT_ContextDeclaration_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ClassifierContext YY_RESULT_ClassifierContext_ = null;
  public OCL.Absyn.ClassifierContext ParseClassifierContext()
  {
    if(this.Parse())
    {
      return YY_RESULT_ClassifierContext_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OperationContext YY_RESULT_OperationContext_ = null;
  public OCL.Absyn.OperationContext ParseOperationContext()
  {
    if(this.Parse())
    {
      return YY_RESULT_OperationContext_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Stereotype YY_RESULT_Stereotype_ = null;
  public OCL.Absyn.Stereotype ParseStereotype()
  {
    if(this.Parse())
    {
      return YY_RESULT_Stereotype_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OperationName YY_RESULT_OperationName_ = null;
  public OCL.Absyn.OperationName ParseOperationName()
  {
    if(this.Parse())
    {
      return YY_RESULT_OperationName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListFormalParameter YY_RESULT_ListFormalParameter_ = null;
  public OCL.Absyn.ListFormalParameter ParseListFormalParameter()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListFormalParameter_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.FormalParameter YY_RESULT_FormalParameter_ = null;
  public OCL.Absyn.FormalParameter ParseFormalParameter()
  {
    if(this.Parse())
    {
      return YY_RESULT_FormalParameter_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.TypeSpecifier YY_RESULT_TypeSpecifier_ = null;
  public OCL.Absyn.TypeSpecifier ParseTypeSpecifier()
  {
    if(this.Parse())
    {
      return YY_RESULT_TypeSpecifier_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.CollectionType YY_RESULT_CollectionType_ = null;
  public OCL.Absyn.CollectionType ParseCollectionType()
  {
    if(this.Parse())
    {
      return YY_RESULT_CollectionType_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ReturnType YY_RESULT_ReturnType_ = null;
  public OCL.Absyn.ReturnType ParseReturnType()
  {
    if(this.Parse())
    {
      return YY_RESULT_ReturnType_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLExpression YY_RESULT_OCLExpression_ = null;
  public OCL.Absyn.OCLExpression ParseOCLExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.LetExpression YY_RESULT_LetExpression_ = null;
  public OCL.Absyn.LetExpression ParseLetExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_LetExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListLetExpression YY_RESULT_ListLetExpression_ = null;
  public OCL.Absyn.ListLetExpression ParseListLetExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListLetExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.IfExpression YY_RESULT_IfExpression_ = null;
  public OCL.Absyn.IfExpression ParseIfExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_IfExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Expression YY_RESULT_Expression_ = null;
  public OCL.Absyn.Expression ParseExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_Expression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.MessageArg YY_RESULT_MessageArg_ = null;
  public OCL.Absyn.MessageArg ParseMessageArg()
  {
    if(this.Parse())
    {
      return YY_RESULT_MessageArg_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListMessageArg YY_RESULT_ListMessageArg_ = null;
  public OCL.Absyn.ListMessageArg ParseListMessageArg()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListMessageArg_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PropertyCall YY_RESULT_PropertyCall_ = null;
  public OCL.Absyn.PropertyCall ParsePropertyCall()
  {
    if(this.Parse())
    {
      return YY_RESULT_PropertyCall_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PathName YY_RESULT_PathName_ = null;
  public OCL.Absyn.PathName ParsePathName()
  {
    if(this.Parse())
    {
      return YY_RESULT_PathName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PName YY_RESULT_PName_ = null;
  public OCL.Absyn.PName ParsePName()
  {
    if(this.Parse())
    {
      return YY_RESULT_PName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListPName YY_RESULT_ListPName_ = null;
  public OCL.Absyn.ListPName ParseListPName()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListPName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PossQualifiers YY_RESULT_PossQualifiers_ = null;
  public OCL.Absyn.PossQualifiers ParsePossQualifiers()
  {
    if(this.Parse())
    {
      return YY_RESULT_PossQualifiers_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Qualifiers YY_RESULT_Qualifiers_ = null;
  public OCL.Absyn.Qualifiers ParseQualifiers()
  {
    if(this.Parse())
    {
      return YY_RESULT_Qualifiers_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PossTimeExpression YY_RESULT_PossTimeExpression_ = null;
  public OCL.Absyn.PossTimeExpression ParsePossTimeExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_PossTimeExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PossPropCallParam YY_RESULT_PossPropCallParam_ = null;
  public OCL.Absyn.PossPropCallParam ParsePossPropCallParam()
  {
    if(this.Parse())
    {
      return YY_RESULT_PossPropCallParam_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Declarator YY_RESULT_Declarator_ = null;
  public OCL.Absyn.Declarator ParseDeclarator()
  {
    if(this.Parse())
    {
      return YY_RESULT_Declarator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.DeclaratorVarList YY_RESULT_DeclaratorVarList_ = null;
  public OCL.Absyn.DeclaratorVarList ParseDeclaratorVarList()
  {
    if(this.Parse())
    {
      return YY_RESULT_DeclaratorVarList_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListIdent YY_RESULT_ListIdent_ = null;
  public OCL.Absyn.ListIdent ParseListIdent()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListIdent_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PropertyCallParameters YY_RESULT_PropertyCallParameters_ = null;
  public OCL.Absyn.PropertyCallParameters ParsePropertyCallParameters()
  {
    if(this.Parse())
    {
      return YY_RESULT_PropertyCallParameters_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListExpression YY_RESULT_ListExpression_ = null;
  public OCL.Absyn.ListExpression ParseListExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PCPHelper YY_RESULT_PCPHelper_ = null;
  public OCL.Absyn.PCPHelper ParsePCPHelper()
  {
    if(this.Parse())
    {
      return YY_RESULT_PCPHelper_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListPCPHelper YY_RESULT_ListPCPHelper_ = null;
  public OCL.Absyn.ListPCPHelper ParseListPCPHelper()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListPCPHelper_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLLiteral YY_RESULT_OCLLiteral_ = null;
  public OCL.Absyn.OCLLiteral ParseOCLLiteral()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLLiteral_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.SimpleTypeSpecifier YY_RESULT_SimpleTypeSpecifier_ = null;
  public OCL.Absyn.SimpleTypeSpecifier ParseSimpleTypeSpecifier()
  {
    if(this.Parse())
    {
      return YY_RESULT_SimpleTypeSpecifier_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.LiteralCollection YY_RESULT_LiteralCollection_ = null;
  public OCL.Absyn.LiteralCollection ParseLiteralCollection()
  {
    if(this.Parse())
    {
      return YY_RESULT_LiteralCollection_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListCollectionItem YY_RESULT_ListCollectionItem_ = null;
  public OCL.Absyn.ListCollectionItem ParseListCollectionItem()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListCollectionItem_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.CollectionItem YY_RESULT_CollectionItem_ = null;
  public OCL.Absyn.CollectionItem ParseCollectionItem()
  {
    if(this.Parse())
    {
      return YY_RESULT_CollectionItem_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLNumber YY_RESULT_OCLNumber_ = null;
  public OCL.Absyn.OCLNumber ParseOCLNumber()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLNumber_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.LogicalOperator YY_RESULT_LogicalOperator_ = null;
  public OCL.Absyn.LogicalOperator ParseLogicalOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_LogicalOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.CollectionKind YY_RESULT_CollectionKind_ = null;
  public OCL.Absyn.CollectionKind ParseCollectionKind()
  {
    if(this.Parse())
    {
      return YY_RESULT_CollectionKind_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.EqualityOperator YY_RESULT_EqualityOperator_ = null;
  public OCL.Absyn.EqualityOperator ParseEqualityOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_EqualityOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.RelationalOperator YY_RESULT_RelationalOperator_ = null;
  public OCL.Absyn.RelationalOperator ParseRelationalOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_RelationalOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.AddOperator YY_RESULT_AddOperator_ = null;
  public OCL.Absyn.AddOperator ParseAddOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_AddOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.MultiplyOperator YY_RESULT_MultiplyOperator_ = null;
  public OCL.Absyn.MultiplyOperator ParseMultiplyOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_MultiplyOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.UnaryOperator YY_RESULT_UnaryOperator_ = null;
  public OCL.Absyn.UnaryOperator ParseUnaryOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_UnaryOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PostfixOperator YY_RESULT_PostfixOperator_ = null;
  public OCL.Absyn.PostfixOperator ParsePostfixOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_PostfixOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
%}

%union
{
  public int int_;
  public char char_;
  public double double_;
  public string string_;
  public OCL.Absyn.OCLfile oclfile_;
  public OCL.Absyn.ListOCLPackage listoclpackage_;
  public OCL.Absyn.OCLPackage oclpackage_;
  public OCL.Absyn.PackageName packagename_;
  public OCL.Absyn.OCLExpressions oclexpressions_;
  public OCL.Absyn.ListConstrnt listconstrnt_;
  public OCL.Absyn.Constrnt constrnt_;
  public OCL.Absyn.ListConstrBody listconstrbody_;
  public OCL.Absyn.ConstrBody constrbody_;
  public OCL.Absyn.ContextDeclaration contextdeclaration_;
  public OCL.Absyn.ClassifierContext classifiercontext_;
  public OCL.Absyn.OperationContext operationcontext_;
  public OCL.Absyn.Stereotype stereotype_;
  public OCL.Absyn.OperationName operationname_;
  public OCL.Absyn.ListFormalParameter listformalparameter_;
  public OCL.Absyn.FormalParameter formalparameter_;
  public OCL.Absyn.TypeSpecifier typespecifier_;
  public OCL.Absyn.CollectionType collectiontype_;
  public OCL.Absyn.ReturnType returntype_;
  public OCL.Absyn.OCLExpression oclexpression_;
  public OCL.Absyn.LetExpression letexpression_;
  public OCL.Absyn.ListLetExpression listletexpression_;
  public OCL.Absyn.IfExpression ifexpression_;
  public OCL.Absyn.Expression expression_;
  public OCL.Absyn.MessageArg messagearg_;
  public OCL.Absyn.ListMessageArg listmessagearg_;
  public OCL.Absyn.PropertyCall propertycall_;
  public OCL.Absyn.PathName pathname_;
  public OCL.Absyn.PName pname_;
  public OCL.Absyn.ListPName listpname_;
  public OCL.Absyn.PossQualifiers possqualifiers_;
  public OCL.Absyn.Qualifiers qualifiers_;
  public OCL.Absyn.PossTimeExpression posstimeexpression_;
  public OCL.Absyn.PossPropCallParam posspropcallparam_;
  public OCL.Absyn.Declarator declarator_;
  public OCL.Absyn.DeclaratorVarList declaratorvarlist_;
  public OCL.Absyn.ListIdent listident_;
  public OCL.Absyn.PropertyCallParameters propertycallparameters_;
  public OCL.Absyn.ListExpression listexpression_;
  public OCL.Absyn.PCPHelper pcphelper_;
  public OCL.Absyn.ListPCPHelper listpcphelper_;
  public OCL.Absyn.OCLLiteral oclliteral_;
  public OCL.Absyn.SimpleTypeSpecifier simpletypespecifier_;
  public OCL.Absyn.LiteralCollection literalcollection_;
  public OCL.Absyn.ListCollectionItem listcollectionitem_;
  public OCL.Absyn.CollectionItem collectionitem_;
  public OCL.Absyn.OCLNumber oclnumber_;
  public OCL.Absyn.LogicalOperator logicaloperator_;
  public OCL.Absyn.CollectionKind collectionkind_;
  public OCL.Absyn.EqualityOperator equalityoperator_;
  public OCL.Absyn.RelationalOperator relationaloperator_;
  public OCL.Absyn.AddOperator addoperator_;
  public OCL.Absyn.MultiplyOperator multiplyoperator_;
  public OCL.Absyn.UnaryOperator unaryoperator_;
  public OCL.Absyn.PostfixOperator postfixoperator_;
}

%token SYMB_0    //   ":"
%token SYMB_1    //   "::"
%token SYMB_2    //   "("
%token SYMB_3    //   ")"
%token SYMB_4    //   "="
%token SYMB_5    //   "+"
%token SYMB_6    //   "-"
%token SYMB_7    //   "<"
%token SYMB_8    //   "<="
%token SYMB_9    //   ">"
%token SYMB_10    //   ">="
%token SYMB_11    //   "/"
%token SYMB_12    //   "*"
%token SYMB_13    //   "<>"
%token SYMB_14    //   ","
%token SYMB_15    //   "^"
%token SYMB_16    //   "?"
%token SYMB_17    //   "["
%token SYMB_18    //   "]"
%token SYMB_19    //   "@"
%token SYMB_20    //   "|"
%token SYMB_21    //   ";"
%token SYMB_22    //   "{"
%token SYMB_23    //   "}"
%token SYMB_24    //   ".."
%token SYMB_25    //   "."
%token SYMB_26    //   "->"
%token SYMB_27    //   "Bag"
%token SYMB_28    //   "Collection"
%token SYMB_29    //   "Sequence"
%token SYMB_30    //   "Set"
%token SYMB_31    //   "and"
%token SYMB_32    //   "context"
%token SYMB_33    //   "def"
%token SYMB_34    //   "else"
%token SYMB_35    //   "endif"
%token SYMB_36    //   "endpackage"
%token SYMB_37    //   "false"
%token SYMB_38    //   "if"
%token SYMB_39    //   "implies"
%token SYMB_40    //   "in"
%token SYMB_41    //   "inv"
%token SYMB_42    //   "let"
%token SYMB_43    //   "not"
%token SYMB_44    //   "null"
%token SYMB_45    //   "or"
%token SYMB_46    //   "package"
%token SYMB_47    //   "post"
%token SYMB_48    //   "pre"
%token SYMB_49    //   "then"
%token SYMB_50    //   "true"
%token SYMB_51    //   "xor"

%type <oclfile_> OCLfile
%type <listoclpackage_> ListOCLPackage
%type <oclpackage_> OCLPackage
%type <packagename_> PackageName
%type <oclexpressions_> OCLExpressions
%type <listconstrnt_> ListConstrnt
%type <constrnt_> Constrnt
%type <listconstrbody_> ListConstrBody
%type <constrbody_> ConstrBody
%type <contextdeclaration_> ContextDeclaration
%type <classifiercontext_> ClassifierContext
%type <operationcontext_> OperationContext
%type <stereotype_> Stereotype
%type <operationname_> OperationName
%type <listformalparameter_> ListFormalParameter
%type <formalparameter_> FormalParameter
%type <typespecifier_> TypeSpecifier
%type <collectiontype_> CollectionType
%type <returntype_> ReturnType
%type <oclexpression_> OCLExpression
%type <letexpression_> LetExpression
%type <listletexpression_> ListLetExpression
%type <ifexpression_> IfExpression
%type <expression_> Expression
// %type <expression_> Expression
// %type <expression_> Expression
// %type <expression_> Expression
// %type <expression_> Expression
// %type <expression_> Expression
// %type <expression_> Expression
// %type <expression_> Expression
// %type <expression_> Expression
%type <messagearg_> MessageArg
%type <listmessagearg_> ListMessageArg
%type <propertycall_> PropertyCall
%type <pathname_> PathName
%type <pname_> PName
%type <listpname_> ListPName
%type <possqualifiers_> PossQualifiers
%type <qualifiers_> Qualifiers
%type <posstimeexpression_> PossTimeExpression
%type <posspropcallparam_> PossPropCallParam
%type <declarator_> Declarator
%type <declaratorvarlist_> DeclaratorVarList
%type <listident_> ListIdent
%type <propertycallparameters_> PropertyCallParameters
%type <listexpression_> ListExpression
%type <pcphelper_> PCPHelper
%type <listpcphelper_> ListPCPHelper
%type <oclliteral_> OCLLiteral
%type <simpletypespecifier_> SimpleTypeSpecifier
%type <literalcollection_> LiteralCollection
%type <listcollectionitem_> ListCollectionItem
%type <collectionitem_> CollectionItem
%type <oclnumber_> OCLNumber
%type <logicaloperator_> LogicalOperator
%type <collectionkind_> CollectionKind
%type <equalityoperator_> EqualityOperator
%type <relationaloperator_> RelationalOperator
%type <addoperator_> AddOperator
%type <multiplyoperator_> MultiplyOperator
%type <unaryoperator_> UnaryOperator
%type <postfixoperator_> PostfixOperator

%token<string_> STRING_
%token<int_> INTEGER_
%token<double_> DOUBLE_
%token<string_> IDENT_

%%
// Warning: NonTerminal symbol "Declarator" is unreachable
// Warning: NonTerminal symbol "DeclaratorVarList" is unreachable
// Warning: NonTerminal symbol "ListIdent" is unreachable
// --------------------------------------------------------------
OCLfile : ListOCLPackage {  $$ = new OCL.Absyn.OCLf($1); YY_RESULT_OCLfile_= $$; } 
;
ListOCLPackage : OCLPackage {  $$ = new OCL.Absyn.ListOCLPackage(); $$.Add($1);  } 
  | OCLPackage ListOCLPackage {  $$ = $2; $2.Insert(0, $1);  }
;
OCLPackage : SYMB_46 PackageName OCLExpressions SYMB_36 {  $$ = new OCL.Absyn.Pack($2,$3);  } 
;
PackageName : PathName {  $$ = new OCL.Absyn.PackName($1);  } 
;
OCLExpressions : ListConstrnt {  $$ = new OCL.Absyn.Constraints($1);  } 
;
ListConstrnt : /* empty */ {  $$ = new OCL.Absyn.ListConstrnt();  } 
  | ListConstrnt Constrnt {  $$ = $1; $1.Add($2);  }
;
Constrnt : ContextDeclaration ListConstrBody {  $$ = new OCL.Absyn.Constr($1,$2); YY_RESULT_Constrnt_= $$; } 
;
ListConstrBody : ConstrBody {  $$ = new OCL.Absyn.ListConstrBody(); $$.Add($1);  } 
  | ConstrBody ListConstrBody {  $$ = $2; $2.Insert(0, $1);  }
;
ConstrBody : SYMB_33 IDENT_ SYMB_0 ListLetExpression {  $$ = new OCL.Absyn.CBDefNamed($2,$4);  } 
  | SYMB_33 SYMB_0 ListLetExpression {  $$ = new OCL.Absyn.CBDef($3);  }
  | Stereotype IDENT_ SYMB_0 OCLExpression {  $$ = new OCL.Absyn.CBNamed($1,$2,$4);  }
  | Stereotype SYMB_0 OCLExpression {  $$ = new OCL.Absyn.CB($1,$3);  }
;
ContextDeclaration : SYMB_32 OperationContext {  $$ = new OCL.Absyn.CDOper($2);  } 
  | SYMB_32 ClassifierContext {  $$ = new OCL.Absyn.CDClassif($2);  }
;
ClassifierContext : IDENT_ SYMB_0 IDENT_ {  $$ = new OCL.Absyn.CCType($1,$3);  } 
  | IDENT_ {  $$ = new OCL.Absyn.CC($1);  }
;
OperationContext : IDENT_ SYMB_1 OperationName SYMB_2 ListFormalParameter SYMB_3 {  $$ = new OCL.Absyn.OpC($1,$3,$5);  } 
  | IDENT_ SYMB_1 OperationName SYMB_2 ListFormalParameter SYMB_3 SYMB_0 ReturnType {  $$ = new OCL.Absyn.OpCRT($1,$3,$5,$8);  }
;
Stereotype : SYMB_48 {  $$ = new OCL.Absyn.Pre();  } 
  | SYMB_47 {  $$ = new OCL.Absyn.Post();  }
  | SYMB_41 {  $$ = new OCL.Absyn.Inv();  }
;
OperationName : IDENT_ {  $$ = new OCL.Absyn.OpName($1);  } 
  | SYMB_4 {  $$ = new OCL.Absyn.Eq();  }
  | SYMB_5 {  $$ = new OCL.Absyn.Add();  }
  | SYMB_6 {  $$ = new OCL.Absyn.Sub();  }
  | SYMB_7 {  $$ = new OCL.Absyn.LST();  }
  | SYMB_8 {  $$ = new OCL.Absyn.LSTE();  }
  | SYMB_9 {  $$ = new OCL.Absyn.GRT();  }
  | SYMB_10 {  $$ = new OCL.Absyn.GRTE();  }
  | SYMB_11 {  $$ = new OCL.Absyn.Div();  }
  | SYMB_12 {  $$ = new OCL.Absyn.Mult();  }
  | SYMB_13 {  $$ = new OCL.Absyn.NEq();  }
  | SYMB_39 {  $$ = new OCL.Absyn.Impl();  }
  | SYMB_43 {  $$ = new OCL.Absyn.Not();  }
  | SYMB_45 {  $$ = new OCL.Absyn.Or();  }
  | SYMB_51 {  $$ = new OCL.Absyn.Xor();  }
  | SYMB_31 {  $$ = new OCL.Absyn.And();  }
;
ListFormalParameter : /* empty */ {  $$ = new OCL.Absyn.ListFormalParameter();  } 
  | FormalParameter {  $$ = new OCL.Absyn.ListFormalParameter(); $$.Add($1);  }
  | FormalParameter SYMB_14 ListFormalParameter {  $$ = $3; $3.Insert(0, $1);  }
;
FormalParameter : IDENT_ SYMB_0 TypeSpecifier {  $$ = new OCL.Absyn.FP($1,$3);  } 
;
TypeSpecifier : SimpleTypeSpecifier {  $$ = new OCL.Absyn.TSsimple($1);  } 
  | CollectionType {  $$ = new OCL.Absyn.TScoll($1);  }
;
CollectionType : CollectionKind SYMB_2 SimpleTypeSpecifier SYMB_3 {  $$ = new OCL.Absyn.CT($1,$3);  } 
;
ReturnType : TypeSpecifier {  $$ = new OCL.Absyn.RT($1);  } 
;
OCLExpression : Expression {  $$ = new OCL.Absyn.OCLExp($1);  } 
  | ListLetExpression SYMB_40 Expression {  $$ = new OCL.Absyn.OCLExpLet($1,$3);  }
;
LetExpression : SYMB_42 IDENT_ SYMB_4 Expression {  $$ = new OCL.Absyn.LENoParam($2,$4);  } 
  | SYMB_42 IDENT_ SYMB_0 TypeSpecifier SYMB_4 Expression {  $$ = new OCL.Absyn.LENoParamType($2,$4,$6);  }
  | SYMB_42 IDENT_ SYMB_2 ListFormalParameter SYMB_3 SYMB_4 Expression {  $$ = new OCL.Absyn.LE($2,$4,$7);  }
  | SYMB_42 IDENT_ SYMB_2 ListFormalParameter SYMB_3 SYMB_0 TypeSpecifier SYMB_4 Expression {  $$ = new OCL.Absyn.LEType($2,$4,$7,$9);  }
;
ListLetExpression : LetExpression {  $$ = new OCL.Absyn.ListLetExpression(); $$.Add($1);  } 
  | LetExpression ListLetExpression {  $$ = $2; $2.Insert(0, $1);  }
;
IfExpression : SYMB_38 Expression SYMB_49 Expression SYMB_34 Expression SYMB_35 {  $$ = new OCL.Absyn.IfExp($2,$4,$6);  } 
;
Expression : Expression SYMB_39 Expression1 {  $$ = new OCL.Absyn.EOpImpl($1,$3.expression_); YY_RESULT_Expression_= $$; } 
  | Expression1 {  $$ = $1.expression_; YY_RESULT_Expression_= $$; }
;
Expression1 : Expression1 LogicalOperator Expression2 {  $$.expression_ = new OCL.Absyn.EOpLog($1.expression_,$2,$3.expression_);  } 
  | Expression2 {  $$ = $1;  }
;
Expression2 : Expression2 EqualityOperator Expression3 {  $$.expression_ = new OCL.Absyn.EOpEq($1.expression_,$2,$3.expression_);  } 
  | Expression3 {  $$ = $1;  }
;
Expression3 : Expression3 RelationalOperator Expression4 {  $$.expression_ = new OCL.Absyn.EOpRel($1.expression_,$2,$3.expression_);  } 
  | Expression4 {  $$ = $1;  }
;
Expression4 : Expression4 AddOperator Expression5 {  $$.expression_ = new OCL.Absyn.EOpAdd($1.expression_,$2,$3.expression_);  } 
  | Expression5 {  $$ = $1;  }
;
Expression5 : Expression5 MultiplyOperator Expression6 {  $$.expression_ = new OCL.Absyn.EOpMul($1.expression_,$2,$3.expression_);  } 
  | Expression6 {  $$ = $1;  }
;
Expression6 : UnaryOperator Expression7 {  $$.expression_ = new OCL.Absyn.EOpUn($1,$2.expression_);  } 
  | Expression7 {  $$ = $1;  }
;
Expression7 : Expression7 PostfixOperator PropertyCall {  $$.expression_ = new OCL.Absyn.EExplPropCall($1.expression_,$2,$3);  } 
  | Expression7 SYMB_15 PathName SYMB_2 ListMessageArg SYMB_3 {  $$.expression_ = new OCL.Absyn.EMessage($1.expression_,$3,$5);  }
  | Expression8 {  $$ = $1;  }
;
Expression8 : PropertyCall {  $$.expression_ = new OCL.Absyn.EImplPropCall($1);  } 
  | LiteralCollection {  $$.expression_ = new OCL.Absyn.ELitColl($1);  }
  | OCLLiteral {  $$.expression_ = new OCL.Absyn.ELit($1);  }
  | IfExpression {  $$.expression_ = new OCL.Absyn.EIfExp($1);  }
  | SYMB_44 {  $$.expression_ = new OCL.Absyn.ENull();  }
  | SYMB_2 Expression SYMB_3 {  $$.expression_ = $2;  }
;
MessageArg : Expression {  $$ = new OCL.Absyn.MAExpr($1);  } 
  | SYMB_16 {  $$ = new OCL.Absyn.MAUnspec();  }
  | SYMB_16 SYMB_0 TypeSpecifier {  $$ = new OCL.Absyn.MAUnspecTyped($3);  }
;
ListMessageArg : /* empty */ {  $$ = new OCL.Absyn.ListMessageArg();  } 
  | MessageArg {  $$ = new OCL.Absyn.ListMessageArg(); $$.Add($1);  }
  | MessageArg SYMB_14 ListMessageArg {  $$ = $3; $3.Insert(0, $1);  }
;
PropertyCall : PathName PossTimeExpression PossQualifiers PossPropCallParam {  $$ = new OCL.Absyn.PCall($1,$2,$3,$4);  } 
;
PathName : ListPName {  $$ = new OCL.Absyn.PathN($1);  } 
;
PName : IDENT_ {  $$ = new OCL.Absyn.PN($1);  } 
;
ListPName : PName {  $$ = new OCL.Absyn.ListPName(); $$.Add($1);  } 
  | PName SYMB_1 ListPName {  $$ = $3; $3.Insert(0, $1);  }
;
PossQualifiers : /* empty */ {  $$ = new OCL.Absyn.NoQual();  } 
  | Qualifiers {  $$ = new OCL.Absyn.Qual($1);  }
;
Qualifiers : SYMB_17 ListExpression SYMB_18 {  $$ = new OCL.Absyn.Quals($2);  } 
;
PossTimeExpression : /* empty */ {  $$ = new OCL.Absyn.NoTE();  } 
  | SYMB_19 SYMB_48 {  $$ = new OCL.Absyn.AtPre();  }
;
PossPropCallParam : /* empty */ {  $$ = new OCL.Absyn.NoPCP();  } 
  | PropertyCallParameters {  $$ = new OCL.Absyn.PCPs($1);  }
;
Declarator : DeclaratorVarList SYMB_20 {  $$ = new OCL.Absyn.Decl($1);  } 
  | DeclaratorVarList SYMB_21 IDENT_ SYMB_0 TypeSpecifier SYMB_4 Expression SYMB_20 {  $$ = new OCL.Absyn.DeclAcc($1,$3,$5,$7);  }
;
DeclaratorVarList : ListIdent {  $$ = new OCL.Absyn.DVL($1);  } 
  | ListIdent SYMB_0 SimpleTypeSpecifier {  $$ = new OCL.Absyn.DVLType($1,$3);  }
;
ListIdent : IDENT_ {  $$ = new OCL.Absyn.ListIdent(); $$.Add($1);  } 
  | IDENT_ SYMB_14 ListIdent {  $$ = $3; $3.Insert(0, $1);  }
;
PropertyCallParameters : SYMB_2 SYMB_3 {  $$ = new OCL.Absyn.PCPNoDeclNoParam();  } 
  | SYMB_2 Expression ListPCPHelper SYMB_3 {  $$ = new OCL.Absyn.PCPConcrete($2,$3);  }
;
ListExpression : /* empty */ {  $$ = new OCL.Absyn.ListExpression();  } 
  | Expression {  $$ = new OCL.Absyn.ListExpression(); $$.Add($1);  }
  | Expression SYMB_14 ListExpression {  $$ = $3; $3.Insert(0, $1);  }
;
PCPHelper : SYMB_14 Expression {  $$ = new OCL.Absyn.PCPComma($2);  } 
  | SYMB_0 SimpleTypeSpecifier {  $$ = new OCL.Absyn.PCPColon($2);  }
  | SYMB_21 IDENT_ SYMB_0 TypeSpecifier SYMB_4 Expression {  $$ = new OCL.Absyn.PCPIterate($2,$4,$6);  }
  | SYMB_20 Expression {  $$ = new OCL.Absyn.PCPBar($2);  }
;
ListPCPHelper : /* empty */ {  $$ = new OCL.Absyn.ListPCPHelper();  } 
  | ListPCPHelper PCPHelper {  $$ = $1; $1.Add($2);  }
;
OCLLiteral : STRING_ {  $$ = new OCL.Absyn.LitStr($1);  } 
  | OCLNumber {  $$ = new OCL.Absyn.LitNum($1);  }
  | SYMB_50 {  $$ = new OCL.Absyn.LitBoolTrue();  }
  | SYMB_37 {  $$ = new OCL.Absyn.LitBoolFalse();  }
;
SimpleTypeSpecifier : PathName {  $$ = new OCL.Absyn.STSpec($1);  } 
;
LiteralCollection : CollectionKind SYMB_22 ListCollectionItem SYMB_23 {  $$ = new OCL.Absyn.LCollection($1,$3);  } 
  | CollectionKind SYMB_22 SYMB_23 {  $$ = new OCL.Absyn.LCollectionEmpty($1);  }
;
ListCollectionItem : CollectionItem {  $$ = new OCL.Absyn.ListCollectionItem(); $$.Add($1);  } 
  | CollectionItem SYMB_14 ListCollectionItem {  $$ = $3; $3.Insert(0, $1);  }
;
CollectionItem : Expression {  $$ = new OCL.Absyn.CI($1);  } 
  | Expression SYMB_24 Expression {  $$ = new OCL.Absyn.CIRange($1,$3);  }
;
OCLNumber : INTEGER_ {  $$ = new OCL.Absyn.NumInt($1);  } 
  | DOUBLE_ {  $$ = new OCL.Absyn.NumDouble($1);  }
;
LogicalOperator : SYMB_31 {  $$ = new OCL.Absyn.LAnd();  } 
  | SYMB_45 {  $$ = new OCL.Absyn.LOr();  }
  | SYMB_51 {  $$ = new OCL.Absyn.LXor();  }
;
CollectionKind : SYMB_30 {  $$ = new OCL.Absyn.Set();  } 
  | SYMB_27 {  $$ = new OCL.Absyn.Bag();  }
  | SYMB_29 {  $$ = new OCL.Absyn.Sequence();  }
  | SYMB_28 {  $$ = new OCL.Absyn.Collection();  }
;
EqualityOperator : SYMB_4 {  $$ = new OCL.Absyn.EEq();  } 
  | SYMB_13 {  $$ = new OCL.Absyn.ENEq();  }
;
RelationalOperator : SYMB_9 {  $$ = new OCL.Absyn.RGT();  } 
  | SYMB_10 {  $$ = new OCL.Absyn.RGTE();  }
  | SYMB_7 {  $$ = new OCL.Absyn.RLT();  }
  | SYMB_8 {  $$ = new OCL.Absyn.RLTE();  }
;
AddOperator : SYMB_5 {  $$ = new OCL.Absyn.AAdd();  } 
  | SYMB_6 {  $$ = new OCL.Absyn.ASub();  }
;
MultiplyOperator : SYMB_12 {  $$ = new OCL.Absyn.MMult();  } 
  | SYMB_11 {  $$ = new OCL.Absyn.MDiv();  }
;
UnaryOperator : SYMB_6 {  $$ = new OCL.Absyn.UMin();  } 
  | SYMB_43 {  $$ = new OCL.Absyn.UNot();  }
;
PostfixOperator : SYMB_25 {  $$ = new OCL.Absyn.PDot();  } 
  | SYMB_26 {  $$ = new OCL.Absyn.PArrow();  }
;

// ==========================================================================

