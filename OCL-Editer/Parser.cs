// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  vant
// DateTime: 23.10.2019 12:36:27
// UserName: yuri
// Input file <OCL.y - 23.10.2019 12:34:29>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace OCL
{
public enum Tokens {error=2,EOF=3,SYMB_0=4,SYMB_1=5,SYMB_2=6,
    SYMB_3=7,SYMB_4=8,SYMB_5=9,SYMB_6=10,SYMB_7=11,SYMB_8=12,
    SYMB_9=13,SYMB_10=14,SYMB_11=15,SYMB_12=16,SYMB_13=17,SYMB_14=18,
    SYMB_15=19,SYMB_16=20,SYMB_17=21,SYMB_18=22,SYMB_19=23,SYMB_20=24,
    SYMB_21=25,SYMB_22=26,SYMB_23=27,SYMB_24=28,SYMB_25=29,SYMB_26=30,
    SYMB_27=31,SYMB_28=32,SYMB_29=33,SYMB_30=34,SYMB_31=35,SYMB_32=36,
    SYMB_33=37,SYMB_34=38,SYMB_35=39,SYMB_36=40,SYMB_37=41,SYMB_38=42,
    SYMB_39=43,SYMB_40=44,SYMB_41=45,SYMB_42=46,SYMB_43=47,SYMB_44=48,
    SYMB_45=49,SYMB_46=50,SYMB_47=51,SYMB_48=52,SYMB_49=53,SYMB_50=54,
    SYMB_51=55,STRING_=56,INTEGER_=57,DOUBLE_=58,IDENT_=59};

public struct ValueType
#line 724 "OCL.y"
{
  public int int_;
  public char char_;
  public double double_;
  public string string_;
  public OCL.Absyn.OCLfile oclfile_;
  public OCL.Absyn.ListOCLPackage listoclpackage_;
  public OCL.Absyn.OCLPackage oclpackage_;
  public OCL.Absyn.PackageName packagename_;
  public OCL.Absyn.OCLExpressions oclexpressions_;
  public OCL.Absyn.ListConstrnt listconstrnt_;
  public OCL.Absyn.Constrnt constrnt_;
  public OCL.Absyn.ListConstrBody listconstrbody_;
  public OCL.Absyn.ConstrBody constrbody_;
  public OCL.Absyn.ContextDeclaration contextdeclaration_;
  public OCL.Absyn.ClassifierContext classifiercontext_;
  public OCL.Absyn.OperationContext operationcontext_;
  public OCL.Absyn.Stereotype stereotype_;
  public OCL.Absyn.OperationName operationname_;
  public OCL.Absyn.ListFormalParameter listformalparameter_;
  public OCL.Absyn.FormalParameter formalparameter_;
  public OCL.Absyn.TypeSpecifier typespecifier_;
  public OCL.Absyn.CollectionType collectiontype_;
  public OCL.Absyn.ReturnType returntype_;
  public OCL.Absyn.OCLExpression oclexpression_;
  public OCL.Absyn.LetExpression letexpression_;
  public OCL.Absyn.ListLetExpression listletexpression_;
  public OCL.Absyn.IfExpression ifexpression_;
  public OCL.Absyn.Expression expression_;
  public OCL.Absyn.MessageArg messagearg_;
  public OCL.Absyn.ListMessageArg listmessagearg_;
  public OCL.Absyn.PropertyCall propertycall_;
  public OCL.Absyn.PathName pathname_;
  public OCL.Absyn.PName pname_;
  public OCL.Absyn.ListPName listpname_;
  public OCL.Absyn.PossQualifiers possqualifiers_;
  public OCL.Absyn.Qualifiers qualifiers_;
  public OCL.Absyn.PossTimeExpression posstimeexpression_;
  public OCL.Absyn.PossPropCallParam posspropcallparam_;
  public OCL.Absyn.Declarator declarator_;
  public OCL.Absyn.DeclaratorVarList declaratorvarlist_;
  public OCL.Absyn.ListIdent listident_;
  public OCL.Absyn.PropertyCallParameters propertycallparameters_;
  public OCL.Absyn.ListExpression listexpression_;
  public OCL.Absyn.PCPHelper pcphelper_;
  public OCL.Absyn.ListPCPHelper listpcphelper_;
  public OCL.Absyn.OCLLiteral oclliteral_;
  public OCL.Absyn.SimpleTypeSpecifier simpletypespecifier_;
  public OCL.Absyn.LiteralCollection literalcollection_;
  public OCL.Absyn.ListCollectionItem listcollectionitem_;
  public OCL.Absyn.CollectionItem collectionitem_;
  public OCL.Absyn.OCLNumber oclnumber_;
  public OCL.Absyn.LogicalOperator logicaloperator_;
  public OCL.Absyn.CollectionKind collectionkind_;
  public OCL.Absyn.EqualityOperator equalityoperator_;
  public OCL.Absyn.RelationalOperator relationaloperator_;
  public OCL.Absyn.AddOperator addoperator_;
  public OCL.Absyn.MultiplyOperator multiplyoperator_;
  public OCL.Absyn.UnaryOperator unaryoperator_;
  public OCL.Absyn.PostfixOperator postfixoperator_;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  internal LexLocation yylloc;
  internal ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  public Parser(AbstractScanner<ValueType, LexLocation> scanner) 
  {
    Scanner = scanner;
  }
  // Verbatim content from OCL.y - 23.10.2019 12:34:29
#line 6 "OCL.y"
  OCL.Absyn.OCLfile YY_RESULT_OCLfile_ = null;
  public OCL.Absyn.OCLfile ParseOCLfile()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLfile_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListOCLPackage YY_RESULT_ListOCLPackage_ = null;
  public OCL.Absyn.ListOCLPackage ParseListOCLPackage()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListOCLPackage_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLPackage YY_RESULT_OCLPackage_ = null;
  public OCL.Absyn.OCLPackage ParseOCLPackage()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLPackage_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PackageName YY_RESULT_PackageName_ = null;
  public OCL.Absyn.PackageName ParsePackageName()
  {
    if(this.Parse())
    {
      return YY_RESULT_PackageName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLExpressions YY_RESULT_OCLExpressions_ = null;
  public OCL.Absyn.OCLExpressions ParseOCLExpressions()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLExpressions_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListConstrnt YY_RESULT_ListConstrnt_ = null;
  public OCL.Absyn.ListConstrnt ParseListConstrnt()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListConstrnt_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Constrnt YY_RESULT_Constrnt_ = null;
  public OCL.Absyn.Constrnt ParseConstrnt()
  {
    if(this.Parse())
    {
      return YY_RESULT_Constrnt_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListConstrBody YY_RESULT_ListConstrBody_ = null;
  public OCL.Absyn.ListConstrBody ParseListConstrBody()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListConstrBody_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ConstrBody YY_RESULT_ConstrBody_ = null;
  public OCL.Absyn.ConstrBody ParseConstrBody()
  {
    if(this.Parse())
    {
      return YY_RESULT_ConstrBody_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ContextDeclaration YY_RESULT_ContextDeclaration_ = null;
  public OCL.Absyn.ContextDeclaration ParseContextDeclaration()
  {
    if(this.Parse())
    {
      return YY_RESULT_ContextDeclaration_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ClassifierContext YY_RESULT_ClassifierContext_ = null;
  public OCL.Absyn.ClassifierContext ParseClassifierContext()
  {
    if(this.Parse())
    {
      return YY_RESULT_ClassifierContext_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OperationContext YY_RESULT_OperationContext_ = null;
  public OCL.Absyn.OperationContext ParseOperationContext()
  {
    if(this.Parse())
    {
      return YY_RESULT_OperationContext_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Stereotype YY_RESULT_Stereotype_ = null;
  public OCL.Absyn.Stereotype ParseStereotype()
  {
    if(this.Parse())
    {
      return YY_RESULT_Stereotype_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OperationName YY_RESULT_OperationName_ = null;
  public OCL.Absyn.OperationName ParseOperationName()
  {
    if(this.Parse())
    {
      return YY_RESULT_OperationName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListFormalParameter YY_RESULT_ListFormalParameter_ = null;
  public OCL.Absyn.ListFormalParameter ParseListFormalParameter()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListFormalParameter_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.FormalParameter YY_RESULT_FormalParameter_ = null;
  public OCL.Absyn.FormalParameter ParseFormalParameter()
  {
    if(this.Parse())
    {
      return YY_RESULT_FormalParameter_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.TypeSpecifier YY_RESULT_TypeSpecifier_ = null;
  public OCL.Absyn.TypeSpecifier ParseTypeSpecifier()
  {
    if(this.Parse())
    {
      return YY_RESULT_TypeSpecifier_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.CollectionType YY_RESULT_CollectionType_ = null;
  public OCL.Absyn.CollectionType ParseCollectionType()
  {
    if(this.Parse())
    {
      return YY_RESULT_CollectionType_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ReturnType YY_RESULT_ReturnType_ = null;
  public OCL.Absyn.ReturnType ParseReturnType()
  {
    if(this.Parse())
    {
      return YY_RESULT_ReturnType_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLExpression YY_RESULT_OCLExpression_ = null;
  public OCL.Absyn.OCLExpression ParseOCLExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.LetExpression YY_RESULT_LetExpression_ = null;
  public OCL.Absyn.LetExpression ParseLetExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_LetExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListLetExpression YY_RESULT_ListLetExpression_ = null;
  public OCL.Absyn.ListLetExpression ParseListLetExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListLetExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.IfExpression YY_RESULT_IfExpression_ = null;
  public OCL.Absyn.IfExpression ParseIfExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_IfExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Expression YY_RESULT_Expression_ = null;
  public OCL.Absyn.Expression ParseExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_Expression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.MessageArg YY_RESULT_MessageArg_ = null;
  public OCL.Absyn.MessageArg ParseMessageArg()
  {
    if(this.Parse())
    {
      return YY_RESULT_MessageArg_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListMessageArg YY_RESULT_ListMessageArg_ = null;
  public OCL.Absyn.ListMessageArg ParseListMessageArg()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListMessageArg_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PropertyCall YY_RESULT_PropertyCall_ = null;
  public OCL.Absyn.PropertyCall ParsePropertyCall()
  {
    if(this.Parse())
    {
      return YY_RESULT_PropertyCall_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PathName YY_RESULT_PathName_ = null;
  public OCL.Absyn.PathName ParsePathName()
  {
    if(this.Parse())
    {
      return YY_RESULT_PathName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PName YY_RESULT_PName_ = null;
  public OCL.Absyn.PName ParsePName()
  {
    if(this.Parse())
    {
      return YY_RESULT_PName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListPName YY_RESULT_ListPName_ = null;
  public OCL.Absyn.ListPName ParseListPName()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListPName_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PossQualifiers YY_RESULT_PossQualifiers_ = null;
  public OCL.Absyn.PossQualifiers ParsePossQualifiers()
  {
    if(this.Parse())
    {
      return YY_RESULT_PossQualifiers_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Qualifiers YY_RESULT_Qualifiers_ = null;
  public OCL.Absyn.Qualifiers ParseQualifiers()
  {
    if(this.Parse())
    {
      return YY_RESULT_Qualifiers_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PossTimeExpression YY_RESULT_PossTimeExpression_ = null;
  public OCL.Absyn.PossTimeExpression ParsePossTimeExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_PossTimeExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PossPropCallParam YY_RESULT_PossPropCallParam_ = null;
  public OCL.Absyn.PossPropCallParam ParsePossPropCallParam()
  {
    if(this.Parse())
    {
      return YY_RESULT_PossPropCallParam_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.Declarator YY_RESULT_Declarator_ = null;
  public OCL.Absyn.Declarator ParseDeclarator()
  {
    if(this.Parse())
    {
      return YY_RESULT_Declarator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.DeclaratorVarList YY_RESULT_DeclaratorVarList_ = null;
  public OCL.Absyn.DeclaratorVarList ParseDeclaratorVarList()
  {
    if(this.Parse())
    {
      return YY_RESULT_DeclaratorVarList_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListIdent YY_RESULT_ListIdent_ = null;
  public OCL.Absyn.ListIdent ParseListIdent()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListIdent_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PropertyCallParameters YY_RESULT_PropertyCallParameters_ = null;
  public OCL.Absyn.PropertyCallParameters ParsePropertyCallParameters()
  {
    if(this.Parse())
    {
      return YY_RESULT_PropertyCallParameters_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListExpression YY_RESULT_ListExpression_ = null;
  public OCL.Absyn.ListExpression ParseListExpression()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListExpression_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PCPHelper YY_RESULT_PCPHelper_ = null;
  public OCL.Absyn.PCPHelper ParsePCPHelper()
  {
    if(this.Parse())
    {
      return YY_RESULT_PCPHelper_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListPCPHelper YY_RESULT_ListPCPHelper_ = null;
  public OCL.Absyn.ListPCPHelper ParseListPCPHelper()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListPCPHelper_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLLiteral YY_RESULT_OCLLiteral_ = null;
  public OCL.Absyn.OCLLiteral ParseOCLLiteral()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLLiteral_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.SimpleTypeSpecifier YY_RESULT_SimpleTypeSpecifier_ = null;
  public OCL.Absyn.SimpleTypeSpecifier ParseSimpleTypeSpecifier()
  {
    if(this.Parse())
    {
      return YY_RESULT_SimpleTypeSpecifier_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.LiteralCollection YY_RESULT_LiteralCollection_ = null;
  public OCL.Absyn.LiteralCollection ParseLiteralCollection()
  {
    if(this.Parse())
    {
      return YY_RESULT_LiteralCollection_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.ListCollectionItem YY_RESULT_ListCollectionItem_ = null;
  public OCL.Absyn.ListCollectionItem ParseListCollectionItem()
  {
    if(this.Parse())
    {
      return YY_RESULT_ListCollectionItem_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.CollectionItem YY_RESULT_CollectionItem_ = null;
  public OCL.Absyn.CollectionItem ParseCollectionItem()
  {
    if(this.Parse())
    {
      return YY_RESULT_CollectionItem_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.OCLNumber YY_RESULT_OCLNumber_ = null;
  public OCL.Absyn.OCLNumber ParseOCLNumber()
  {
    if(this.Parse())
    {
      return YY_RESULT_OCLNumber_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.LogicalOperator YY_RESULT_LogicalOperator_ = null;
  public OCL.Absyn.LogicalOperator ParseLogicalOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_LogicalOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.CollectionKind YY_RESULT_CollectionKind_ = null;
  public OCL.Absyn.CollectionKind ParseCollectionKind()
  {
    if(this.Parse())
    {
      return YY_RESULT_CollectionKind_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.EqualityOperator YY_RESULT_EqualityOperator_ = null;
  public OCL.Absyn.EqualityOperator ParseEqualityOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_EqualityOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.RelationalOperator YY_RESULT_RelationalOperator_ = null;
  public OCL.Absyn.RelationalOperator ParseRelationalOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_RelationalOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.AddOperator YY_RESULT_AddOperator_ = null;
  public OCL.Absyn.AddOperator ParseAddOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_AddOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.MultiplyOperator YY_RESULT_MultiplyOperator_ = null;
  public OCL.Absyn.MultiplyOperator ParseMultiplyOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_MultiplyOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.UnaryOperator YY_RESULT_UnaryOperator_ = null;
  public OCL.Absyn.UnaryOperator ParseUnaryOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_UnaryOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
  OCL.Absyn.PostfixOperator YY_RESULT_PostfixOperator_ = null;
  public OCL.Absyn.PostfixOperator ParsePostfixOperator()
  {
    if(this.Parse())
    {
      return YY_RESULT_PostfixOperator_;
    }
    else
    {
      throw new Exception("Could not parse input stream!");
    }
  }
  
#line default
  // End verbatim content from OCL.y - 23.10.2019 12:34:29

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[151];
  private static State[] states = new State[224];
  private static string[] nonTerms = new string[] {
      "OCLfile", "ListOCLPackage", "OCLPackage", "PackageName", "OCLExpressions", 
      "ListConstrnt", "Constrnt", "ListConstrBody", "ConstrBody", "ContextDeclaration", 
      "ClassifierContext", "OperationContext", "Stereotype", "OperationName", 
      "ListFormalParameter", "FormalParameter", "TypeSpecifier", "CollectionType", 
      "ReturnType", "OCLExpression", "LetExpression", "ListLetExpression", "IfExpression", 
      "Expression", "MessageArg", "ListMessageArg", "PropertyCall", "PathName", 
      "PName", "ListPName", "PossQualifiers", "Qualifiers", "PossTimeExpression", 
      "PossPropCallParam", "Declarator", "DeclaratorVarList", "ListIdent", "PropertyCallParameters", 
      "ListExpression", "PCPHelper", "ListPCPHelper", "OCLLiteral", "SimpleTypeSpecifier", 
      "LiteralCollection", "ListCollectionItem", "CollectionItem", "OCLNumber", 
      "LogicalOperator", "CollectionKind", "EqualityOperator", "RelationalOperator", 
      "AddOperator", "MultiplyOperator", "UnaryOperator", "PostfixOperator", 
      "$accept", "Expression1", "Expression2", "Expression3", "Expression4", 
      "Expression5", "Expression6", "Expression7", "Expression8", };

  static Parser() {
    states[0] = new State(new int[]{50,6},new int[]{-1,1,-2,3,-3,4});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{50,6,3,-3},new int[]{-2,5,-3,4});
    states[5] = new State(-4);
    states[6] = new State(new int[]{59,92},new int[]{-4,7,-28,223,-30,88,-29,89});
    states[7] = new State(-8,new int[]{-5,8,-6,10});
    states[8] = new State(new int[]{40,9});
    states[9] = new State(-5);
    states[10] = new State(new int[]{36,193,40,-7},new int[]{-7,11,-10,12});
    states[11] = new State(-9);
    states[12] = new State(new int[]{37,16,52,190,51,191,45,192},new int[]{-8,13,-9,14,-13,180});
    states[13] = new State(-10);
    states[14] = new State(new int[]{37,16,52,190,51,191,45,192,36,-11,40,-11},new int[]{-8,15,-9,14,-13,180});
    states[15] = new State(-12);
    states[16] = new State(new int[]{59,17,4,178});
    states[17] = new State(new int[]{4,18});
    states[18] = new State(new int[]{46,22},new int[]{-22,19,-21,20});
    states[19] = new State(-13);
    states[20] = new State(new int[]{46,22,37,-56,52,-56,51,-56,45,-56,36,-56,40,-56,44,-56},new int[]{-22,21,-21,20});
    states[21] = new State(-57);
    states[22] = new State(new int[]{59,23});
    states[23] = new State(new int[]{8,24,4,159,6,163});
    states[24] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,25,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[25] = new State(new int[]{43,26,46,-52,37,-52,52,-52,51,-52,45,-52,36,-52,40,-52,44,-52});
    states[26] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-57,27,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[27] = new State(new int[]{35,56,49,57,55,58,43,-59,46,-59,37,-59,52,-59,51,-59,45,-59,36,-59,40,-59,44,-59,7,-59,18,-59,4,-59,25,-59,24,-59,28,-59,27,-59,53,-59,38,-59,39,-59,22,-59},new int[]{-48,28});
    states[28] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-58,29,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[29] = new State(new int[]{8,60,17,61,35,-61,49,-61,55,-61,43,-61,46,-61,37,-61,52,-61,51,-61,45,-61,36,-61,40,-61,44,-61,7,-61,18,-61,4,-61,25,-61,24,-61,28,-61,27,-61,53,-61,38,-61,39,-61,22,-61},new int[]{-50,30});
    states[30] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-59,31,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[31] = new State(new int[]{13,63,14,64,11,65,12,66,8,-63,17,-63,35,-63,49,-63,55,-63,43,-63,46,-63,37,-63,52,-63,51,-63,45,-63,36,-63,40,-63,44,-63,7,-63,18,-63,4,-63,25,-63,24,-63,28,-63,27,-63,53,-63,38,-63,39,-63,22,-63},new int[]{-51,32});
    states[32] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-60,33,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[33] = new State(new int[]{9,68,10,69,13,-65,14,-65,11,-65,12,-65,8,-65,17,-65,35,-65,49,-65,55,-65,43,-65,46,-65,37,-65,52,-65,51,-65,45,-65,36,-65,40,-65,44,-65,7,-65,18,-65,4,-65,25,-65,24,-65,28,-65,27,-65,53,-65,38,-65,39,-65,22,-65},new int[]{-52,34});
    states[34] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-61,35,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[35] = new State(new int[]{16,71,15,72,9,-67,10,-67,13,-67,14,-67,11,-67,12,-67,8,-67,17,-67,35,-67,49,-67,55,-67,43,-67,46,-67,37,-67,52,-67,51,-67,45,-67,36,-67,40,-67,44,-67,7,-67,18,-67,4,-67,25,-67,24,-67,28,-67,27,-67,53,-67,38,-67,39,-67,22,-67},new int[]{-53,36});
    states[36] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-62,37,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[37] = new State(-69);
    states[38] = new State(new int[]{59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-63,39,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[39] = new State(new int[]{19,77,29,138,30,139,16,-71,15,-71,9,-71,10,-71,13,-71,14,-71,11,-71,12,-71,8,-71,17,-71,35,-71,49,-71,55,-71,43,-71,46,-71,37,-71,52,-71,51,-71,45,-71,36,-71,40,-71,44,-71,7,-71,18,-71,4,-71,25,-71,24,-71,28,-71,27,-71,53,-71,38,-71,39,-71,22,-71},new int[]{-55,40});
    states[40] = new State(new int[]{59,92},new int[]{-27,41,-28,42,-30,88,-29,89});
    states[41] = new State(-73);
    states[42] = new State(new int[]{23,157,21,-96,6,-96,19,-96,29,-96,30,-96,16,-96,15,-96,9,-96,10,-96,13,-96,14,-96,11,-96,12,-96,8,-96,17,-96,35,-96,49,-96,55,-96,43,-96,46,-96,37,-96,52,-96,51,-96,45,-96,36,-96,40,-96,44,-96,7,-96,18,-96,4,-96,25,-96,24,-96,28,-96,27,-96,53,-96,38,-96,39,-96,22,-96},new int[]{-33,43});
    states[43] = new State(new int[]{21,151,6,-93,19,-93,29,-93,30,-93,16,-93,15,-93,9,-93,10,-93,13,-93,14,-93,11,-93,12,-93,8,-93,17,-93,35,-93,49,-93,55,-93,43,-93,46,-93,37,-93,52,-93,51,-93,45,-93,36,-93,40,-93,44,-93,7,-93,18,-93,4,-93,25,-93,24,-93,28,-93,27,-93,53,-93,38,-93,39,-93,22,-93},new int[]{-31,44,-32,150});
    states[44] = new State(new int[]{6,47,19,-98,29,-98,30,-98,16,-98,15,-98,9,-98,10,-98,13,-98,14,-98,11,-98,12,-98,8,-98,17,-98,35,-98,49,-98,55,-98,43,-98,46,-98,37,-98,52,-98,51,-98,45,-98,36,-98,40,-98,44,-98,7,-98,18,-98,4,-98,25,-98,24,-98,28,-98,27,-98,53,-98,38,-98,39,-98,22,-98},new int[]{-34,45,-38,46});
    states[45] = new State(-88);
    states[46] = new State(-99);
    states[47] = new State(new int[]{7,48,10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,49,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[48] = new State(-106);
    states[49] = new State(new int[]{43,26,7,-115,18,-115,4,-115,25,-115,24,-115},new int[]{-41,50});
    states[50] = new State(new int[]{7,51,18,53,4,140,25,142,24,148},new int[]{-40,52});
    states[51] = new State(-107);
    states[52] = new State(-116);
    states[53] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,54,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[54] = new State(new int[]{43,26,7,-111,18,-111,4,-111,25,-111,24,-111});
    states[55] = new State(new int[]{35,56,49,57,55,58,43,-60,46,-60,37,-60,52,-60,51,-60,45,-60,36,-60,40,-60,44,-60,7,-60,18,-60,4,-60,25,-60,24,-60,28,-60,27,-60,53,-60,38,-60,39,-60,22,-60},new int[]{-48,28});
    states[56] = new State(-130);
    states[57] = new State(-131);
    states[58] = new State(-132);
    states[59] = new State(new int[]{8,60,17,61,35,-62,49,-62,55,-62,43,-62,46,-62,37,-62,52,-62,51,-62,45,-62,36,-62,40,-62,44,-62,7,-62,18,-62,4,-62,25,-62,24,-62,28,-62,27,-62,53,-62,38,-62,39,-62,22,-62},new int[]{-50,30});
    states[60] = new State(-137);
    states[61] = new State(-138);
    states[62] = new State(new int[]{13,63,14,64,11,65,12,66,8,-64,17,-64,35,-64,49,-64,55,-64,43,-64,46,-64,37,-64,52,-64,51,-64,45,-64,36,-64,40,-64,44,-64,7,-64,18,-64,4,-64,25,-64,24,-64,28,-64,27,-64,53,-64,38,-64,39,-64,22,-64},new int[]{-51,32});
    states[63] = new State(-139);
    states[64] = new State(-140);
    states[65] = new State(-141);
    states[66] = new State(-142);
    states[67] = new State(new int[]{9,68,10,69,13,-66,14,-66,11,-66,12,-66,8,-66,17,-66,35,-66,49,-66,55,-66,43,-66,46,-66,37,-66,52,-66,51,-66,45,-66,36,-66,40,-66,44,-66,7,-66,18,-66,4,-66,25,-66,24,-66,28,-66,27,-66,53,-66,38,-66,39,-66,22,-66},new int[]{-52,34});
    states[68] = new State(-143);
    states[69] = new State(-144);
    states[70] = new State(new int[]{16,71,15,72,9,-68,10,-68,13,-68,14,-68,11,-68,12,-68,8,-68,17,-68,35,-68,49,-68,55,-68,43,-68,46,-68,37,-68,52,-68,51,-68,45,-68,36,-68,40,-68,44,-68,7,-68,18,-68,4,-68,25,-68,24,-68,28,-68,27,-68,53,-68,38,-68,39,-68,22,-68},new int[]{-53,36});
    states[71] = new State(-145);
    states[72] = new State(-146);
    states[73] = new State(-70);
    states[74] = new State(-147);
    states[75] = new State(-148);
    states[76] = new State(new int[]{19,77,29,138,30,139,16,-72,15,-72,9,-72,10,-72,13,-72,14,-72,11,-72,12,-72,8,-72,17,-72,35,-72,49,-72,55,-72,43,-72,46,-72,37,-72,52,-72,51,-72,45,-72,36,-72,40,-72,44,-72,7,-72,18,-72,4,-72,25,-72,24,-72,28,-72,27,-72,53,-72,38,-72,39,-72,22,-72},new int[]{-55,40});
    states[77] = new State(new int[]{59,92},new int[]{-28,78,-30,88,-29,89});
    states[78] = new State(new int[]{6,79});
    states[79] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125,20,128,7,-85},new int[]{-26,80,-25,82,-24,85,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[80] = new State(new int[]{7,81});
    states[81] = new State(-74);
    states[82] = new State(new int[]{18,83,7,-86});
    states[83] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125,20,128,7,-85},new int[]{-26,84,-25,82,-24,85,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[84] = new State(-87);
    states[85] = new State(new int[]{43,26,18,-82,7,-82});
    states[86] = new State(-75);
    states[87] = new State(-76);
    states[88] = new State(-89);
    states[89] = new State(new int[]{5,90,40,-91,36,-91,23,-91,21,-91,6,-91,19,-91,29,-91,30,-91,16,-91,15,-91,9,-91,10,-91,13,-91,14,-91,11,-91,12,-91,8,-91,17,-91,35,-91,49,-91,55,-91,43,-91,46,-91,37,-91,52,-91,51,-91,45,-91,44,-91,7,-91,18,-91,4,-91,25,-91,24,-91,28,-91,27,-91,53,-91,38,-91,39,-91,22,-91});
    states[90] = new State(new int[]{59,92},new int[]{-30,91,-29,89});
    states[91] = new State(-92);
    states[92] = new State(-90);
    states[93] = new State(-77);
    states[94] = new State(new int[]{26,95});
    states[95] = new State(new int[]{27,98,10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-45,96,-46,99,-24,102,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[96] = new State(new int[]{27,97});
    states[97] = new State(-122);
    states[98] = new State(-123);
    states[99] = new State(new int[]{18,100,27,-124});
    states[100] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-45,101,-46,99,-24,102,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[101] = new State(-125);
    states[102] = new State(new int[]{43,26,28,103,18,-126,27,-126});
    states[103] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,104,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[104] = new State(new int[]{43,26,18,-127,27,-127});
    states[105] = new State(-133);
    states[106] = new State(-134);
    states[107] = new State(-135);
    states[108] = new State(-136);
    states[109] = new State(-78);
    states[110] = new State(-117);
    states[111] = new State(-118);
    states[112] = new State(-128);
    states[113] = new State(-129);
    states[114] = new State(-119);
    states[115] = new State(-120);
    states[116] = new State(-79);
    states[117] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,118,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[118] = new State(new int[]{53,119,43,26});
    states[119] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,120,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[120] = new State(new int[]{38,121,43,26});
    states[121] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,122,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[122] = new State(new int[]{39,123,43,26});
    states[123] = new State(-58);
    states[124] = new State(-80);
    states[125] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,126,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[126] = new State(new int[]{7,127,43,26});
    states[127] = new State(-81);
    states[128] = new State(new int[]{4,129,18,-83,7,-83});
    states[129] = new State(new int[]{59,92,34,105,31,106,33,107,32,108},new int[]{-17,130,-43,131,-28,132,-30,88,-29,89,-18,133,-49,134});
    states[130] = new State(-84);
    states[131] = new State(-46);
    states[132] = new State(-121);
    states[133] = new State(-47);
    states[134] = new State(new int[]{6,135});
    states[135] = new State(new int[]{59,92},new int[]{-43,136,-28,132,-30,88,-29,89});
    states[136] = new State(new int[]{7,137});
    states[137] = new State(-48);
    states[138] = new State(-149);
    states[139] = new State(-150);
    states[140] = new State(new int[]{59,92},new int[]{-43,141,-28,132,-30,88,-29,89});
    states[141] = new State(-112);
    states[142] = new State(new int[]{59,143});
    states[143] = new State(new int[]{4,144});
    states[144] = new State(new int[]{59,92,34,105,31,106,33,107,32,108},new int[]{-17,145,-43,131,-28,132,-30,88,-29,89,-18,133,-49,134});
    states[145] = new State(new int[]{8,146});
    states[146] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,147,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[147] = new State(new int[]{43,26,7,-113,18,-113,4,-113,25,-113,24,-113});
    states[148] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,149,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[149] = new State(new int[]{43,26,7,-114,18,-114,4,-114,25,-114,24,-114});
    states[150] = new State(-94);
    states[151] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125,22,-108},new int[]{-39,152,-24,154,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[152] = new State(new int[]{22,153});
    states[153] = new State(-95);
    states[154] = new State(new int[]{43,26,18,155,22,-109});
    states[155] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125,22,-108},new int[]{-39,156,-24,154,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[156] = new State(-110);
    states[157] = new State(new int[]{52,158});
    states[158] = new State(-97);
    states[159] = new State(new int[]{59,92,34,105,31,106,33,107,32,108},new int[]{-17,160,-43,131,-28,132,-30,88,-29,89,-18,133,-49,134});
    states[160] = new State(new int[]{8,161});
    states[161] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,162,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[162] = new State(new int[]{43,26,46,-53,37,-53,52,-53,51,-53,45,-53,36,-53,40,-53,44,-53});
    states[163] = new State(new int[]{59,175,7,-42},new int[]{-15,164,-16,172});
    states[164] = new State(new int[]{7,165});
    states[165] = new State(new int[]{8,166,4,168});
    states[166] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,167,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[167] = new State(new int[]{43,26,46,-54,37,-54,52,-54,51,-54,45,-54,36,-54,40,-54,44,-54});
    states[168] = new State(new int[]{59,92,34,105,31,106,33,107,32,108},new int[]{-17,169,-43,131,-28,132,-30,88,-29,89,-18,133,-49,134});
    states[169] = new State(new int[]{8,170});
    states[170] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,171,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[171] = new State(new int[]{43,26,46,-55,37,-55,52,-55,51,-55,45,-55,36,-55,40,-55,44,-55});
    states[172] = new State(new int[]{18,173,7,-43});
    states[173] = new State(new int[]{59,175,7,-42},new int[]{-15,174,-16,172});
    states[174] = new State(-44);
    states[175] = new State(new int[]{4,176});
    states[176] = new State(new int[]{59,92,34,105,31,106,33,107,32,108},new int[]{-17,177,-43,131,-28,132,-30,88,-29,89,-18,133,-49,134});
    states[177] = new State(-45);
    states[178] = new State(new int[]{46,22},new int[]{-22,179,-21,20});
    states[179] = new State(-14);
    states[180] = new State(new int[]{59,181,4,188});
    states[181] = new State(new int[]{4,182});
    states[182] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125,46,22},new int[]{-20,183,-24,184,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116,-22,185,-21,20});
    states[183] = new State(-15);
    states[184] = new State(new int[]{43,26,37,-50,52,-50,51,-50,45,-50,36,-50,40,-50});
    states[185] = new State(new int[]{44,186});
    states[186] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125},new int[]{-24,187,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116});
    states[187] = new State(new int[]{43,26,37,-51,52,-51,51,-51,45,-51,36,-51,40,-51});
    states[188] = new State(new int[]{10,74,47,75,59,92,34,105,31,106,33,107,32,108,56,110,57,112,58,113,54,114,41,115,42,117,48,124,6,125,46,22},new int[]{-20,189,-24,184,-57,55,-58,59,-59,62,-60,67,-61,70,-62,73,-54,38,-63,76,-64,86,-27,87,-28,42,-30,88,-29,89,-44,93,-49,94,-42,109,-47,111,-23,116,-22,185,-21,20});
    states[189] = new State(-16);
    states[190] = new State(-23);
    states[191] = new State(-24);
    states[192] = new State(-25);
    states[193] = new State(new int[]{59,196},new int[]{-12,194,-11,195});
    states[194] = new State(-17);
    states[195] = new State(-18);
    states[196] = new State(new int[]{5,197,4,221,37,-20,52,-20,51,-20,45,-20});
    states[197] = new State(new int[]{59,205,8,206,9,207,10,208,11,209,12,210,13,211,14,212,15,213,16,214,17,215,43,216,47,217,49,218,55,219,35,220},new int[]{-14,198});
    states[198] = new State(new int[]{6,199});
    states[199] = new State(new int[]{59,175,7,-42},new int[]{-15,200,-16,172});
    states[200] = new State(new int[]{7,201});
    states[201] = new State(new int[]{4,202,37,-21,52,-21,51,-21,45,-21});
    states[202] = new State(new int[]{59,92,34,105,31,106,33,107,32,108},new int[]{-19,203,-17,204,-43,131,-28,132,-30,88,-29,89,-18,133,-49,134});
    states[203] = new State(-22);
    states[204] = new State(-49);
    states[205] = new State(-26);
    states[206] = new State(-27);
    states[207] = new State(-28);
    states[208] = new State(-29);
    states[209] = new State(-30);
    states[210] = new State(-31);
    states[211] = new State(-32);
    states[212] = new State(-33);
    states[213] = new State(-34);
    states[214] = new State(-35);
    states[215] = new State(-36);
    states[216] = new State(-37);
    states[217] = new State(-38);
    states[218] = new State(-39);
    states[219] = new State(-40);
    states[220] = new State(-41);
    states[221] = new State(new int[]{59,222});
    states[222] = new State(-19);
    states[223] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-56, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{-3});
    rules[4] = new Rule(-2, new int[]{-3,-2});
    rules[5] = new Rule(-3, new int[]{50,-4,-5,40});
    rules[6] = new Rule(-4, new int[]{-28});
    rules[7] = new Rule(-5, new int[]{-6});
    rules[8] = new Rule(-6, new int[]{});
    rules[9] = new Rule(-6, new int[]{-6,-7});
    rules[10] = new Rule(-7, new int[]{-10,-8});
    rules[11] = new Rule(-8, new int[]{-9});
    rules[12] = new Rule(-8, new int[]{-9,-8});
    rules[13] = new Rule(-9, new int[]{37,59,4,-22});
    rules[14] = new Rule(-9, new int[]{37,4,-22});
    rules[15] = new Rule(-9, new int[]{-13,59,4,-20});
    rules[16] = new Rule(-9, new int[]{-13,4,-20});
    rules[17] = new Rule(-10, new int[]{36,-12});
    rules[18] = new Rule(-10, new int[]{36,-11});
    rules[19] = new Rule(-11, new int[]{59,4,59});
    rules[20] = new Rule(-11, new int[]{59});
    rules[21] = new Rule(-12, new int[]{59,5,-14,6,-15,7});
    rules[22] = new Rule(-12, new int[]{59,5,-14,6,-15,7,4,-19});
    rules[23] = new Rule(-13, new int[]{52});
    rules[24] = new Rule(-13, new int[]{51});
    rules[25] = new Rule(-13, new int[]{45});
    rules[26] = new Rule(-14, new int[]{59});
    rules[27] = new Rule(-14, new int[]{8});
    rules[28] = new Rule(-14, new int[]{9});
    rules[29] = new Rule(-14, new int[]{10});
    rules[30] = new Rule(-14, new int[]{11});
    rules[31] = new Rule(-14, new int[]{12});
    rules[32] = new Rule(-14, new int[]{13});
    rules[33] = new Rule(-14, new int[]{14});
    rules[34] = new Rule(-14, new int[]{15});
    rules[35] = new Rule(-14, new int[]{16});
    rules[36] = new Rule(-14, new int[]{17});
    rules[37] = new Rule(-14, new int[]{43});
    rules[38] = new Rule(-14, new int[]{47});
    rules[39] = new Rule(-14, new int[]{49});
    rules[40] = new Rule(-14, new int[]{55});
    rules[41] = new Rule(-14, new int[]{35});
    rules[42] = new Rule(-15, new int[]{});
    rules[43] = new Rule(-15, new int[]{-16});
    rules[44] = new Rule(-15, new int[]{-16,18,-15});
    rules[45] = new Rule(-16, new int[]{59,4,-17});
    rules[46] = new Rule(-17, new int[]{-43});
    rules[47] = new Rule(-17, new int[]{-18});
    rules[48] = new Rule(-18, new int[]{-49,6,-43,7});
    rules[49] = new Rule(-19, new int[]{-17});
    rules[50] = new Rule(-20, new int[]{-24});
    rules[51] = new Rule(-20, new int[]{-22,44,-24});
    rules[52] = new Rule(-21, new int[]{46,59,8,-24});
    rules[53] = new Rule(-21, new int[]{46,59,4,-17,8,-24});
    rules[54] = new Rule(-21, new int[]{46,59,6,-15,7,8,-24});
    rules[55] = new Rule(-21, new int[]{46,59,6,-15,7,4,-17,8,-24});
    rules[56] = new Rule(-22, new int[]{-21});
    rules[57] = new Rule(-22, new int[]{-21,-22});
    rules[58] = new Rule(-23, new int[]{42,-24,53,-24,38,-24,39});
    rules[59] = new Rule(-24, new int[]{-24,43,-57});
    rules[60] = new Rule(-24, new int[]{-57});
    rules[61] = new Rule(-57, new int[]{-57,-48,-58});
    rules[62] = new Rule(-57, new int[]{-58});
    rules[63] = new Rule(-58, new int[]{-58,-50,-59});
    rules[64] = new Rule(-58, new int[]{-59});
    rules[65] = new Rule(-59, new int[]{-59,-51,-60});
    rules[66] = new Rule(-59, new int[]{-60});
    rules[67] = new Rule(-60, new int[]{-60,-52,-61});
    rules[68] = new Rule(-60, new int[]{-61});
    rules[69] = new Rule(-61, new int[]{-61,-53,-62});
    rules[70] = new Rule(-61, new int[]{-62});
    rules[71] = new Rule(-62, new int[]{-54,-63});
    rules[72] = new Rule(-62, new int[]{-63});
    rules[73] = new Rule(-63, new int[]{-63,-55,-27});
    rules[74] = new Rule(-63, new int[]{-63,19,-28,6,-26,7});
    rules[75] = new Rule(-63, new int[]{-64});
    rules[76] = new Rule(-64, new int[]{-27});
    rules[77] = new Rule(-64, new int[]{-44});
    rules[78] = new Rule(-64, new int[]{-42});
    rules[79] = new Rule(-64, new int[]{-23});
    rules[80] = new Rule(-64, new int[]{48});
    rules[81] = new Rule(-64, new int[]{6,-24,7});
    rules[82] = new Rule(-25, new int[]{-24});
    rules[83] = new Rule(-25, new int[]{20});
    rules[84] = new Rule(-25, new int[]{20,4,-17});
    rules[85] = new Rule(-26, new int[]{});
    rules[86] = new Rule(-26, new int[]{-25});
    rules[87] = new Rule(-26, new int[]{-25,18,-26});
    rules[88] = new Rule(-27, new int[]{-28,-33,-31,-34});
    rules[89] = new Rule(-28, new int[]{-30});
    rules[90] = new Rule(-29, new int[]{59});
    rules[91] = new Rule(-30, new int[]{-29});
    rules[92] = new Rule(-30, new int[]{-29,5,-30});
    rules[93] = new Rule(-31, new int[]{});
    rules[94] = new Rule(-31, new int[]{-32});
    rules[95] = new Rule(-32, new int[]{21,-39,22});
    rules[96] = new Rule(-33, new int[]{});
    rules[97] = new Rule(-33, new int[]{23,52});
    rules[98] = new Rule(-34, new int[]{});
    rules[99] = new Rule(-34, new int[]{-38});
    rules[100] = new Rule(-35, new int[]{-36,24});
    rules[101] = new Rule(-35, new int[]{-36,25,59,4,-17,8,-24,24});
    rules[102] = new Rule(-36, new int[]{-37});
    rules[103] = new Rule(-36, new int[]{-37,4,-43});
    rules[104] = new Rule(-37, new int[]{59});
    rules[105] = new Rule(-37, new int[]{59,18,-37});
    rules[106] = new Rule(-38, new int[]{6,7});
    rules[107] = new Rule(-38, new int[]{6,-24,-41,7});
    rules[108] = new Rule(-39, new int[]{});
    rules[109] = new Rule(-39, new int[]{-24});
    rules[110] = new Rule(-39, new int[]{-24,18,-39});
    rules[111] = new Rule(-40, new int[]{18,-24});
    rules[112] = new Rule(-40, new int[]{4,-43});
    rules[113] = new Rule(-40, new int[]{25,59,4,-17,8,-24});
    rules[114] = new Rule(-40, new int[]{24,-24});
    rules[115] = new Rule(-41, new int[]{});
    rules[116] = new Rule(-41, new int[]{-41,-40});
    rules[117] = new Rule(-42, new int[]{56});
    rules[118] = new Rule(-42, new int[]{-47});
    rules[119] = new Rule(-42, new int[]{54});
    rules[120] = new Rule(-42, new int[]{41});
    rules[121] = new Rule(-43, new int[]{-28});
    rules[122] = new Rule(-44, new int[]{-49,26,-45,27});
    rules[123] = new Rule(-44, new int[]{-49,26,27});
    rules[124] = new Rule(-45, new int[]{-46});
    rules[125] = new Rule(-45, new int[]{-46,18,-45});
    rules[126] = new Rule(-46, new int[]{-24});
    rules[127] = new Rule(-46, new int[]{-24,28,-24});
    rules[128] = new Rule(-47, new int[]{57});
    rules[129] = new Rule(-47, new int[]{58});
    rules[130] = new Rule(-48, new int[]{35});
    rules[131] = new Rule(-48, new int[]{49});
    rules[132] = new Rule(-48, new int[]{55});
    rules[133] = new Rule(-49, new int[]{34});
    rules[134] = new Rule(-49, new int[]{31});
    rules[135] = new Rule(-49, new int[]{33});
    rules[136] = new Rule(-49, new int[]{32});
    rules[137] = new Rule(-50, new int[]{8});
    rules[138] = new Rule(-50, new int[]{17});
    rules[139] = new Rule(-51, new int[]{13});
    rules[140] = new Rule(-51, new int[]{14});
    rules[141] = new Rule(-51, new int[]{11});
    rules[142] = new Rule(-51, new int[]{12});
    rules[143] = new Rule(-52, new int[]{9});
    rules[144] = new Rule(-52, new int[]{10});
    rules[145] = new Rule(-53, new int[]{16});
    rules[146] = new Rule(-53, new int[]{15});
    rules[147] = new Rule(-54, new int[]{10});
    rules[148] = new Rule(-54, new int[]{47});
    rules[149] = new Rule(-55, new int[]{29});
    rules[150] = new Rule(-55, new int[]{30});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // OCLfile -> ListOCLPackage
#line 909 "OCL.y"
                         {  CurrentSemanticValue.oclfile_ = new OCL.Absyn.OCLf(ValueStack[ValueStack.Depth-1].listoclpackage_); YY_RESULT_OCLfile_= CurrentSemanticValue.oclfile_; }
#line default
        break;
      case 3: // ListOCLPackage -> OCLPackage
#line 911 "OCL.y"
                            {  CurrentSemanticValue.listoclpackage_ = new OCL.Absyn.ListOCLPackage(); CurrentSemanticValue.listoclpackage_.Add(ValueStack[ValueStack.Depth-1].oclpackage_);  }
#line default
        break;
      case 4: // ListOCLPackage -> OCLPackage, ListOCLPackage
#line 912 "OCL.y"
                              {  CurrentSemanticValue.listoclpackage_ = ValueStack[ValueStack.Depth-1].listoclpackage_; ValueStack[ValueStack.Depth-1].listoclpackage_.Insert(0, ValueStack[ValueStack.Depth-2].oclpackage_);  }
#line default
        break;
      case 5: // OCLPackage -> SYMB_46, PackageName, OCLExpressions, SYMB_36
#line 914 "OCL.y"
                                                        {  CurrentSemanticValue.oclpackage_ = new OCL.Absyn.Pack(ValueStack[ValueStack.Depth-3].packagename_,ValueStack[ValueStack.Depth-2].oclexpressions_);  }
#line default
        break;
      case 6: // PackageName -> PathName
#line 916 "OCL.y"
                       {  CurrentSemanticValue.packagename_ = new OCL.Absyn.PackName(ValueStack[ValueStack.Depth-1].pathname_);  }
#line default
        break;
      case 7: // OCLExpressions -> ListConstrnt
#line 918 "OCL.y"
                              {  CurrentSemanticValue.oclexpressions_ = new OCL.Absyn.Constraints(ValueStack[ValueStack.Depth-1].listconstrnt_);  }
#line default
        break;
      case 8: // ListConstrnt -> /* empty */
#line 920 "OCL.y"
                           {  CurrentSemanticValue.listconstrnt_ = new OCL.Absyn.ListConstrnt();  }
#line default
        break;
      case 9: // ListConstrnt -> ListConstrnt, Constrnt
#line 921 "OCL.y"
                          {  CurrentSemanticValue.listconstrnt_ = ValueStack[ValueStack.Depth-2].listconstrnt_; ValueStack[ValueStack.Depth-2].listconstrnt_.Add(ValueStack[ValueStack.Depth-1].constrnt_);  }
#line default
        break;
      case 10: // Constrnt -> ContextDeclaration, ListConstrBody
#line 923 "OCL.y"
                                             {  CurrentSemanticValue.constrnt_ = new OCL.Absyn.Constr(ValueStack[ValueStack.Depth-2].contextdeclaration_,ValueStack[ValueStack.Depth-1].listconstrbody_); YY_RESULT_Constrnt_= CurrentSemanticValue.constrnt_; }
#line default
        break;
      case 11: // ListConstrBody -> ConstrBody
#line 925 "OCL.y"
                            {  CurrentSemanticValue.listconstrbody_ = new OCL.Absyn.ListConstrBody(); CurrentSemanticValue.listconstrbody_.Add(ValueStack[ValueStack.Depth-1].constrbody_);  }
#line default
        break;
      case 12: // ListConstrBody -> ConstrBody, ListConstrBody
#line 926 "OCL.y"
                              {  CurrentSemanticValue.listconstrbody_ = ValueStack[ValueStack.Depth-1].listconstrbody_; ValueStack[ValueStack.Depth-1].listconstrbody_.Insert(0, ValueStack[ValueStack.Depth-2].constrbody_);  }
#line default
        break;
      case 13: // ConstrBody -> SYMB_33, IDENT_, SYMB_0, ListLetExpression
#line 928 "OCL.y"
                                                     {  CurrentSemanticValue.constrbody_ = new OCL.Absyn.CBDefNamed(ValueStack[ValueStack.Depth-3].string_,ValueStack[ValueStack.Depth-1].listletexpression_);  }
#line default
        break;
      case 14: // ConstrBody -> SYMB_33, SYMB_0, ListLetExpression
#line 929 "OCL.y"
                                     {  CurrentSemanticValue.constrbody_ = new OCL.Absyn.CBDef(ValueStack[ValueStack.Depth-1].listletexpression_);  }
#line default
        break;
      case 15: // ConstrBody -> Stereotype, IDENT_, SYMB_0, OCLExpression
#line 930 "OCL.y"
                                           {  CurrentSemanticValue.constrbody_ = new OCL.Absyn.CBNamed(ValueStack[ValueStack.Depth-4].stereotype_,ValueStack[ValueStack.Depth-3].string_,ValueStack[ValueStack.Depth-1].oclexpression_);  }
#line default
        break;
      case 16: // ConstrBody -> Stereotype, SYMB_0, OCLExpression
#line 931 "OCL.y"
                                    {  CurrentSemanticValue.constrbody_ = new OCL.Absyn.CB(ValueStack[ValueStack.Depth-3].stereotype_,ValueStack[ValueStack.Depth-1].oclexpression_);  }
#line default
        break;
      case 17: // ContextDeclaration -> SYMB_32, OperationContext
#line 933 "OCL.y"
                                              {  CurrentSemanticValue.contextdeclaration_ = new OCL.Absyn.CDOper(ValueStack[ValueStack.Depth-1].operationcontext_);  }
#line default
        break;
      case 18: // ContextDeclaration -> SYMB_32, ClassifierContext
#line 934 "OCL.y"
                              {  CurrentSemanticValue.contextdeclaration_ = new OCL.Absyn.CDClassif(ValueStack[ValueStack.Depth-1].classifiercontext_);  }
#line default
        break;
      case 19: // ClassifierContext -> IDENT_, SYMB_0, IDENT_
#line 936 "OCL.y"
                                         {  CurrentSemanticValue.classifiercontext_ = new OCL.Absyn.CCType(ValueStack[ValueStack.Depth-3].string_,ValueStack[ValueStack.Depth-1].string_);  }
#line default
        break;
      case 20: // ClassifierContext -> IDENT_
#line 937 "OCL.y"
           {  CurrentSemanticValue.classifiercontext_ = new OCL.Absyn.CC(ValueStack[ValueStack.Depth-1].string_);  }
#line default
        break;
      case 21: // OperationContext -> IDENT_, SYMB_1, OperationName, SYMB_2, ListFormalParameter, 
               //                     SYMB_3
#line 939 "OCL.y"
                                                                                 {  CurrentSemanticValue.operationcontext_ = new OCL.Absyn.OpC(ValueStack[ValueStack.Depth-6].string_,ValueStack[ValueStack.Depth-4].operationname_,ValueStack[ValueStack.Depth-2].listformalparameter_);  }
#line default
        break;
      case 22: // OperationContext -> IDENT_, SYMB_1, OperationName, SYMB_2, ListFormalParameter, 
               //                     SYMB_3, SYMB_0, ReturnType
#line 940 "OCL.y"
                                                                                    {  CurrentSemanticValue.operationcontext_ = new OCL.Absyn.OpCRT(ValueStack[ValueStack.Depth-8].string_,ValueStack[ValueStack.Depth-6].operationname_,ValueStack[ValueStack.Depth-4].listformalparameter_,ValueStack[ValueStack.Depth-1].returntype_);  }
#line default
        break;
      case 23: // Stereotype -> SYMB_48
#line 942 "OCL.y"
                     {  CurrentSemanticValue.stereotype_ = new OCL.Absyn.Pre();  }
#line default
        break;
      case 24: // Stereotype -> SYMB_47
#line 943 "OCL.y"
            {  CurrentSemanticValue.stereotype_ = new OCL.Absyn.Post();  }
#line default
        break;
      case 25: // Stereotype -> SYMB_41
#line 944 "OCL.y"
            {  CurrentSemanticValue.stereotype_ = new OCL.Absyn.Inv();  }
#line default
        break;
      case 26: // OperationName -> IDENT_
#line 946 "OCL.y"
                       {  CurrentSemanticValue.operationname_ = new OCL.Absyn.OpName(ValueStack[ValueStack.Depth-1].string_);  }
#line default
        break;
      case 27: // OperationName -> SYMB_4
#line 947 "OCL.y"
           {  CurrentSemanticValue.operationname_ = new OCL.Absyn.Eq();  }
#line default
        break;
      case 28: // OperationName -> SYMB_5
#line 948 "OCL.y"
           {  CurrentSemanticValue.operationname_ = new OCL.Absyn.Add();  }
#line default
        break;
      case 29: // OperationName -> SYMB_6
#line 949 "OCL.y"
           {  CurrentSemanticValue.operationname_ = new OCL.Absyn.Sub();  }
#line default
        break;
      case 30: // OperationName -> SYMB_7
#line 950 "OCL.y"
           {  CurrentSemanticValue.operationname_ = new OCL.Absyn.LST();  }
#line default
        break;
      case 31: // OperationName -> SYMB_8
#line 951 "OCL.y"
           {  CurrentSemanticValue.operationname_ = new OCL.Absyn.LSTE();  }
#line default
        break;
      case 32: // OperationName -> SYMB_9
#line 952 "OCL.y"
           {  CurrentSemanticValue.operationname_ = new OCL.Absyn.GRT();  }
#line default
        break;
      case 33: // OperationName -> SYMB_10
#line 953 "OCL.y"
            {  CurrentSemanticValue.operationname_ = new OCL.Absyn.GRTE();  }
#line default
        break;
      case 34: // OperationName -> SYMB_11
#line 954 "OCL.y"
            {  CurrentSemanticValue.operationname_ = new OCL.Absyn.Div();  }
#line default
        break;
      case 35: // OperationName -> SYMB_12
#line 955 "OCL.y"
            {  CurrentSemanticValue.operationname_ = new OCL.Absyn.Mult();  }
#line default
        break;
      case 36: // OperationName -> SYMB_13
#line 956 "OCL.y"
            {  CurrentSemanticValue.operationname_ = new OCL.Absyn.NEq();  }
#line default
        break;
      case 37: // OperationName -> SYMB_39
#line 957 "OCL.y"
            {  CurrentSemanticValue.operationname_ = new OCL.Absyn.Impl();  }
#line default
        break;
      case 38: // OperationName -> SYMB_43
#line 958 "OCL.y"
            {  CurrentSemanticValue.operationname_ = new OCL.Absyn.Not();  }
#line default
        break;
      case 39: // OperationName -> SYMB_45
#line 959 "OCL.y"
            {  CurrentSemanticValue.operationname_ = new OCL.Absyn.Or();  }
#line default
        break;
      case 40: // OperationName -> SYMB_51
#line 960 "OCL.y"
            {  CurrentSemanticValue.operationname_ = new OCL.Absyn.Xor();  }
#line default
        break;
      case 41: // OperationName -> SYMB_31
#line 961 "OCL.y"
            {  CurrentSemanticValue.operationname_ = new OCL.Absyn.And();  }
#line default
        break;
      case 42: // ListFormalParameter -> /* empty */
#line 963 "OCL.y"
                                  {  CurrentSemanticValue.listformalparameter_ = new OCL.Absyn.ListFormalParameter();  }
#line default
        break;
      case 43: // ListFormalParameter -> FormalParameter
#line 964 "OCL.y"
                    {  CurrentSemanticValue.listformalparameter_ = new OCL.Absyn.ListFormalParameter(); CurrentSemanticValue.listformalparameter_.Add(ValueStack[ValueStack.Depth-1].formalparameter_);  }
#line default
        break;
      case 44: // ListFormalParameter -> FormalParameter, SYMB_14, ListFormalParameter
#line 965 "OCL.y"
                                                {  CurrentSemanticValue.listformalparameter_ = ValueStack[ValueStack.Depth-1].listformalparameter_; ValueStack[ValueStack.Depth-1].listformalparameter_.Insert(0, ValueStack[ValueStack.Depth-3].formalparameter_);  }
#line default
        break;
      case 45: // FormalParameter -> IDENT_, SYMB_0, TypeSpecifier
#line 967 "OCL.y"
                                              {  CurrentSemanticValue.formalparameter_ = new OCL.Absyn.FP(ValueStack[ValueStack.Depth-3].string_,ValueStack[ValueStack.Depth-1].typespecifier_);  }
#line default
        break;
      case 46: // TypeSpecifier -> SimpleTypeSpecifier
#line 969 "OCL.y"
                                    {  CurrentSemanticValue.typespecifier_ = new OCL.Absyn.TSsimple(ValueStack[ValueStack.Depth-1].simpletypespecifier_);  }
#line default
        break;
      case 47: // TypeSpecifier -> CollectionType
#line 970 "OCL.y"
                   {  CurrentSemanticValue.typespecifier_ = new OCL.Absyn.TScoll(ValueStack[ValueStack.Depth-1].collectiontype_);  }
#line default
        break;
      case 48: // CollectionType -> CollectionKind, SYMB_2, SimpleTypeSpecifier, SYMB_3
#line 972 "OCL.y"
                                                                  {  CurrentSemanticValue.collectiontype_ = new OCL.Absyn.CT(ValueStack[ValueStack.Depth-4].collectionkind_,ValueStack[ValueStack.Depth-2].simpletypespecifier_);  }
#line default
        break;
      case 49: // ReturnType -> TypeSpecifier
#line 974 "OCL.y"
                           {  CurrentSemanticValue.returntype_ = new OCL.Absyn.RT(ValueStack[ValueStack.Depth-1].typespecifier_);  }
#line default
        break;
      case 50: // OCLExpression -> Expression
#line 976 "OCL.y"
                           {  CurrentSemanticValue.oclexpression_ = new OCL.Absyn.OCLExp(ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 51: // OCLExpression -> ListLetExpression, SYMB_40, Expression
#line 977 "OCL.y"
                                         {  CurrentSemanticValue.oclexpression_ = new OCL.Absyn.OCLExpLet(ValueStack[ValueStack.Depth-3].listletexpression_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 52: // LetExpression -> SYMB_42, IDENT_, SYMB_4, Expression
#line 979 "OCL.y"
                                                 {  CurrentSemanticValue.letexpression_ = new OCL.Absyn.LENoParam(ValueStack[ValueStack.Depth-3].string_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 53: // LetExpression -> SYMB_42, IDENT_, SYMB_0, TypeSpecifier, SYMB_4, Expression
#line 980 "OCL.y"
                                                          {  CurrentSemanticValue.letexpression_ = new OCL.Absyn.LENoParamType(ValueStack[ValueStack.Depth-5].string_,ValueStack[ValueStack.Depth-3].typespecifier_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 54: // LetExpression -> SYMB_42, IDENT_, SYMB_2, ListFormalParameter, SYMB_3, SYMB_4, 
               //                  Expression
#line 981 "OCL.y"
                                                                       {  CurrentSemanticValue.letexpression_ = new OCL.Absyn.LE(ValueStack[ValueStack.Depth-6].string_,ValueStack[ValueStack.Depth-4].listformalparameter_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 55: // LetExpression -> SYMB_42, IDENT_, SYMB_2, ListFormalParameter, SYMB_3, SYMB_0, 
               //                  TypeSpecifier, SYMB_4, Expression
#line 982 "OCL.y"
                                                                                            {  CurrentSemanticValue.letexpression_ = new OCL.Absyn.LEType(ValueStack[ValueStack.Depth-8].string_,ValueStack[ValueStack.Depth-6].listformalparameter_,ValueStack[ValueStack.Depth-3].typespecifier_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 56: // ListLetExpression -> LetExpression
#line 984 "OCL.y"
                                  {  CurrentSemanticValue.listletexpression_ = new OCL.Absyn.ListLetExpression(); CurrentSemanticValue.listletexpression_.Add(ValueStack[ValueStack.Depth-1].letexpression_);  }
#line default
        break;
      case 57: // ListLetExpression -> LetExpression, ListLetExpression
#line 985 "OCL.y"
                                    {  CurrentSemanticValue.listletexpression_ = ValueStack[ValueStack.Depth-1].listletexpression_; ValueStack[ValueStack.Depth-1].listletexpression_.Insert(0, ValueStack[ValueStack.Depth-2].letexpression_);  }
#line default
        break;
      case 58: // IfExpression -> SYMB_38, Expression, SYMB_49, Expression, SYMB_34, Expression, 
               //                 SYMB_35
#line 987 "OCL.y"
                                                                                {  CurrentSemanticValue.ifexpression_ = new OCL.Absyn.IfExp(ValueStack[ValueStack.Depth-6].expression_,ValueStack[ValueStack.Depth-4].expression_,ValueStack[ValueStack.Depth-2].expression_);  }
#line default
        break;
      case 59: // Expression -> Expression, SYMB_39, Expression1
#line 989 "OCL.y"
                                            {  CurrentSemanticValue.expression_ = new OCL.Absyn.EOpImpl(ValueStack[ValueStack.Depth-3].expression_,ValueStack[ValueStack.Depth-1].expression_); YY_RESULT_Expression_= CurrentSemanticValue.expression_; }
#line default
        break;
      case 60: // Expression -> Expression1
#line 990 "OCL.y"
                {  CurrentSemanticValue.expression_ = ValueStack[ValueStack.Depth-1].expression_; YY_RESULT_Expression_= CurrentSemanticValue.expression_; }
#line default
        break;
      case 61: // Expression1 -> Expression1, LogicalOperator, Expression2
#line 992 "OCL.y"
                                                      {  CurrentSemanticValue.expression_ = new OCL.Absyn.EOpLog(ValueStack[ValueStack.Depth-3].expression_,ValueStack[ValueStack.Depth-2].logicaloperator_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 62: // Expression1 -> Expression2
#line 993 "OCL.y"
                {  CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
#line default
        break;
      case 63: // Expression2 -> Expression2, EqualityOperator, Expression3
#line 995 "OCL.y"
                                                       {  CurrentSemanticValue.expression_ = new OCL.Absyn.EOpEq(ValueStack[ValueStack.Depth-3].expression_,ValueStack[ValueStack.Depth-2].equalityoperator_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 64: // Expression2 -> Expression3
#line 996 "OCL.y"
                {  CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
#line default
        break;
      case 65: // Expression3 -> Expression3, RelationalOperator, Expression4
#line 998 "OCL.y"
                                                         {  CurrentSemanticValue.expression_ = new OCL.Absyn.EOpRel(ValueStack[ValueStack.Depth-3].expression_,ValueStack[ValueStack.Depth-2].relationaloperator_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 66: // Expression3 -> Expression4
#line 999 "OCL.y"
                {  CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
#line default
        break;
      case 67: // Expression4 -> Expression4, AddOperator, Expression5
#line 1001 "OCL.y"
                                                  {  CurrentSemanticValue.expression_ = new OCL.Absyn.EOpAdd(ValueStack[ValueStack.Depth-3].expression_,ValueStack[ValueStack.Depth-2].addoperator_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 68: // Expression4 -> Expression5
#line 1002 "OCL.y"
                {  CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
#line default
        break;
      case 69: // Expression5 -> Expression5, MultiplyOperator, Expression6
#line 1004 "OCL.y"
                                                       {  CurrentSemanticValue.expression_ = new OCL.Absyn.EOpMul(ValueStack[ValueStack.Depth-3].expression_,ValueStack[ValueStack.Depth-2].multiplyoperator_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 70: // Expression5 -> Expression6
#line 1005 "OCL.y"
                {  CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
#line default
        break;
      case 71: // Expression6 -> UnaryOperator, Expression7
#line 1007 "OCL.y"
                                        {  CurrentSemanticValue.expression_ = new OCL.Absyn.EOpUn(ValueStack[ValueStack.Depth-2].unaryoperator_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 72: // Expression6 -> Expression7
#line 1008 "OCL.y"
                {  CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
#line default
        break;
      case 73: // Expression7 -> Expression7, PostfixOperator, PropertyCall
#line 1010 "OCL.y"
                                                       {  CurrentSemanticValue.expression_ = new OCL.Absyn.EExplPropCall(ValueStack[ValueStack.Depth-3].expression_,ValueStack[ValueStack.Depth-2].postfixoperator_,ValueStack[ValueStack.Depth-1].propertycall_);  }
#line default
        break;
      case 74: // Expression7 -> Expression7, SYMB_15, PathName, SYMB_2, ListMessageArg, SYMB_3
#line 1011 "OCL.y"
                                                              {  CurrentSemanticValue.expression_ = new OCL.Absyn.EMessage(ValueStack[ValueStack.Depth-6].expression_,ValueStack[ValueStack.Depth-4].pathname_,ValueStack[ValueStack.Depth-2].listmessagearg_);  }
#line default
        break;
      case 75: // Expression7 -> Expression8
#line 1012 "OCL.y"
                {  CurrentSemanticValue = ValueStack[ValueStack.Depth-1];  }
#line default
        break;
      case 76: // Expression8 -> PropertyCall
#line 1014 "OCL.y"
                           {  CurrentSemanticValue.expression_ = new OCL.Absyn.EImplPropCall(ValueStack[ValueStack.Depth-1].propertycall_);  }
#line default
        break;
      case 77: // Expression8 -> LiteralCollection
#line 1015 "OCL.y"
                      {  CurrentSemanticValue.expression_ = new OCL.Absyn.ELitColl(ValueStack[ValueStack.Depth-1].literalcollection_);  }
#line default
        break;
      case 78: // Expression8 -> OCLLiteral
#line 1016 "OCL.y"
               {  CurrentSemanticValue.expression_ = new OCL.Absyn.ELit(ValueStack[ValueStack.Depth-1].oclliteral_);  }
#line default
        break;
      case 79: // Expression8 -> IfExpression
#line 1017 "OCL.y"
                 {  CurrentSemanticValue.expression_ = new OCL.Absyn.EIfExp(ValueStack[ValueStack.Depth-1].ifexpression_);  }
#line default
        break;
      case 80: // Expression8 -> SYMB_44
#line 1018 "OCL.y"
            {  CurrentSemanticValue.expression_ = new OCL.Absyn.ENull();  }
#line default
        break;
      case 81: // Expression8 -> SYMB_2, Expression, SYMB_3
#line 1019 "OCL.y"
                             {  CurrentSemanticValue.expression_ = ValueStack[ValueStack.Depth-2].expression_;  }
#line default
        break;
      case 82: // MessageArg -> Expression
#line 1021 "OCL.y"
                        {  CurrentSemanticValue.messagearg_ = new OCL.Absyn.MAExpr(ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 83: // MessageArg -> SYMB_16
#line 1022 "OCL.y"
            {  CurrentSemanticValue.messagearg_ = new OCL.Absyn.MAUnspec();  }
#line default
        break;
      case 84: // MessageArg -> SYMB_16, SYMB_0, TypeSpecifier
#line 1023 "OCL.y"
                                 {  CurrentSemanticValue.messagearg_ = new OCL.Absyn.MAUnspecTyped(ValueStack[ValueStack.Depth-1].typespecifier_);  }
#line default
        break;
      case 85: // ListMessageArg -> /* empty */
#line 1025 "OCL.y"
                             {  CurrentSemanticValue.listmessagearg_ = new OCL.Absyn.ListMessageArg();  }
#line default
        break;
      case 86: // ListMessageArg -> MessageArg
#line 1026 "OCL.y"
               {  CurrentSemanticValue.listmessagearg_ = new OCL.Absyn.ListMessageArg(); CurrentSemanticValue.listmessagearg_.Add(ValueStack[ValueStack.Depth-1].messagearg_);  }
#line default
        break;
      case 87: // ListMessageArg -> MessageArg, SYMB_14, ListMessageArg
#line 1027 "OCL.y"
                                      {  CurrentSemanticValue.listmessagearg_ = ValueStack[ValueStack.Depth-1].listmessagearg_; ValueStack[ValueStack.Depth-1].listmessagearg_.Insert(0, ValueStack[ValueStack.Depth-3].messagearg_);  }
#line default
        break;
      case 88: // PropertyCall -> PathName, PossTimeExpression, PossQualifiers, PossPropCallParam
#line 1029 "OCL.y"
                                                                            {  CurrentSemanticValue.propertycall_ = new OCL.Absyn.PCall(ValueStack[ValueStack.Depth-4].pathname_,ValueStack[ValueStack.Depth-3].posstimeexpression_,ValueStack[ValueStack.Depth-2].possqualifiers_,ValueStack[ValueStack.Depth-1].posspropcallparam_);  }
#line default
        break;
      case 89: // PathName -> ListPName
#line 1031 "OCL.y"
                     {  CurrentSemanticValue.pathname_ = new OCL.Absyn.PathN(ValueStack[ValueStack.Depth-1].listpname_);  }
#line default
        break;
      case 90: // PName -> IDENT_
#line 1033 "OCL.y"
               {  CurrentSemanticValue.pname_ = new OCL.Absyn.PN(ValueStack[ValueStack.Depth-1].string_);  }
#line default
        break;
      case 91: // ListPName -> PName
#line 1035 "OCL.y"
                  {  CurrentSemanticValue.listpname_ = new OCL.Absyn.ListPName(); CurrentSemanticValue.listpname_.Add(ValueStack[ValueStack.Depth-1].pname_);  }
#line default
        break;
      case 92: // ListPName -> PName, SYMB_1, ListPName
#line 1036 "OCL.y"
                           {  CurrentSemanticValue.listpname_ = ValueStack[ValueStack.Depth-1].listpname_; ValueStack[ValueStack.Depth-1].listpname_.Insert(0, ValueStack[ValueStack.Depth-3].pname_);  }
#line default
        break;
      case 93: // PossQualifiers -> /* empty */
#line 1038 "OCL.y"
                             {  CurrentSemanticValue.possqualifiers_ = new OCL.Absyn.NoQual();  }
#line default
        break;
      case 94: // PossQualifiers -> Qualifiers
#line 1039 "OCL.y"
               {  CurrentSemanticValue.possqualifiers_ = new OCL.Absyn.Qual(ValueStack[ValueStack.Depth-1].qualifiers_);  }
#line default
        break;
      case 95: // Qualifiers -> SYMB_17, ListExpression, SYMB_18
#line 1041 "OCL.y"
                                            {  CurrentSemanticValue.qualifiers_ = new OCL.Absyn.Quals(ValueStack[ValueStack.Depth-2].listexpression_);  }
#line default
        break;
      case 96: // PossTimeExpression -> /* empty */
#line 1043 "OCL.y"
                                 {  CurrentSemanticValue.posstimeexpression_ = new OCL.Absyn.NoTE();  }
#line default
        break;
      case 97: // PossTimeExpression -> SYMB_19, SYMB_48
#line 1044 "OCL.y"
                    {  CurrentSemanticValue.posstimeexpression_ = new OCL.Absyn.AtPre();  }
#line default
        break;
      case 98: // PossPropCallParam -> /* empty */
#line 1046 "OCL.y"
                                {  CurrentSemanticValue.posspropcallparam_ = new OCL.Absyn.NoPCP();  }
#line default
        break;
      case 99: // PossPropCallParam -> PropertyCallParameters
#line 1047 "OCL.y"
                           {  CurrentSemanticValue.posspropcallparam_ = new OCL.Absyn.PCPs(ValueStack[ValueStack.Depth-1].propertycallparameters_);  }
#line default
        break;
      case 100: // Declarator -> DeclaratorVarList, SYMB_20
#line 1049 "OCL.y"
                                       {  CurrentSemanticValue.declarator_ = new OCL.Absyn.Decl(ValueStack[ValueStack.Depth-2].declaratorvarlist_);  }
#line default
        break;
      case 101: // Declarator -> DeclaratorVarList, SYMB_21, IDENT_, SYMB_0, TypeSpecifier, SYMB_4, 
                //               Expression, SYMB_20
#line 1050 "OCL.y"
                                                                                    {  CurrentSemanticValue.declarator_ = new OCL.Absyn.DeclAcc(ValueStack[ValueStack.Depth-8].declaratorvarlist_,ValueStack[ValueStack.Depth-6].string_,ValueStack[ValueStack.Depth-4].typespecifier_,ValueStack[ValueStack.Depth-2].expression_);  }
#line default
        break;
      case 102: // DeclaratorVarList -> ListIdent
#line 1052 "OCL.y"
                              {  CurrentSemanticValue.declaratorvarlist_ = new OCL.Absyn.DVL(ValueStack[ValueStack.Depth-1].listident_);  }
#line default
        break;
      case 103: // DeclaratorVarList -> ListIdent, SYMB_0, SimpleTypeSpecifier
#line 1053 "OCL.y"
                                         {  CurrentSemanticValue.declaratorvarlist_ = new OCL.Absyn.DVLType(ValueStack[ValueStack.Depth-3].listident_,ValueStack[ValueStack.Depth-1].simpletypespecifier_);  }
#line default
        break;
      case 104: // ListIdent -> IDENT_
#line 1055 "OCL.y"
                   {  CurrentSemanticValue.listident_ = new OCL.Absyn.ListIdent(); CurrentSemanticValue.listident_.Add(ValueStack[ValueStack.Depth-1].string_);  }
#line default
        break;
      case 105: // ListIdent -> IDENT_, SYMB_14, ListIdent
#line 1056 "OCL.y"
                             {  CurrentSemanticValue.listident_ = ValueStack[ValueStack.Depth-1].listident_; ValueStack[ValueStack.Depth-1].listident_.Insert(0, ValueStack[ValueStack.Depth-3].string_);  }
#line default
        break;
      case 106: // PropertyCallParameters -> SYMB_2, SYMB_3
#line 1058 "OCL.y"
                                       {  CurrentSemanticValue.propertycallparameters_ = new OCL.Absyn.PCPNoDeclNoParam();  }
#line default
        break;
      case 107: // PropertyCallParameters -> SYMB_2, Expression, ListPCPHelper, SYMB_3
#line 1059 "OCL.y"
                                           {  CurrentSemanticValue.propertycallparameters_ = new OCL.Absyn.PCPConcrete(ValueStack[ValueStack.Depth-3].expression_,ValueStack[ValueStack.Depth-2].listpcphelper_);  }
#line default
        break;
      case 108: // ListExpression -> /* empty */
#line 1061 "OCL.y"
                             {  CurrentSemanticValue.listexpression_ = new OCL.Absyn.ListExpression();  }
#line default
        break;
      case 109: // ListExpression -> Expression
#line 1062 "OCL.y"
               {  CurrentSemanticValue.listexpression_ = new OCL.Absyn.ListExpression(); CurrentSemanticValue.listexpression_.Add(ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 110: // ListExpression -> Expression, SYMB_14, ListExpression
#line 1063 "OCL.y"
                                      {  CurrentSemanticValue.listexpression_ = ValueStack[ValueStack.Depth-1].listexpression_; ValueStack[ValueStack.Depth-1].listexpression_.Insert(0, ValueStack[ValueStack.Depth-3].expression_);  }
#line default
        break;
      case 111: // PCPHelper -> SYMB_14, Expression
#line 1065 "OCL.y"
                               {  CurrentSemanticValue.pcphelper_ = new OCL.Absyn.PCPComma(ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 112: // PCPHelper -> SYMB_0, SimpleTypeSpecifier
#line 1066 "OCL.y"
                               {  CurrentSemanticValue.pcphelper_ = new OCL.Absyn.PCPColon(ValueStack[ValueStack.Depth-1].simpletypespecifier_);  }
#line default
        break;
      case 113: // PCPHelper -> SYMB_21, IDENT_, SYMB_0, TypeSpecifier, SYMB_4, Expression
#line 1067 "OCL.y"
                                                          {  CurrentSemanticValue.pcphelper_ = new OCL.Absyn.PCPIterate(ValueStack[ValueStack.Depth-5].string_,ValueStack[ValueStack.Depth-3].typespecifier_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 114: // PCPHelper -> SYMB_20, Expression
#line 1068 "OCL.y"
                       {  CurrentSemanticValue.pcphelper_ = new OCL.Absyn.PCPBar(ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 115: // ListPCPHelper -> /* empty */
#line 1070 "OCL.y"
                            {  CurrentSemanticValue.listpcphelper_ = new OCL.Absyn.ListPCPHelper();  }
#line default
        break;
      case 116: // ListPCPHelper -> ListPCPHelper, PCPHelper
#line 1071 "OCL.y"
                            {  CurrentSemanticValue.listpcphelper_ = ValueStack[ValueStack.Depth-2].listpcphelper_; ValueStack[ValueStack.Depth-2].listpcphelper_.Add(ValueStack[ValueStack.Depth-1].pcphelper_);  }
#line default
        break;
      case 117: // OCLLiteral -> STRING_
#line 1073 "OCL.y"
                     {  CurrentSemanticValue.oclliteral_ = new OCL.Absyn.LitStr(ValueStack[ValueStack.Depth-1].string_);  }
#line default
        break;
      case 118: // OCLLiteral -> OCLNumber
#line 1074 "OCL.y"
              {  CurrentSemanticValue.oclliteral_ = new OCL.Absyn.LitNum(ValueStack[ValueStack.Depth-1].oclnumber_);  }
#line default
        break;
      case 119: // OCLLiteral -> SYMB_50
#line 1075 "OCL.y"
            {  CurrentSemanticValue.oclliteral_ = new OCL.Absyn.LitBoolTrue();  }
#line default
        break;
      case 120: // OCLLiteral -> SYMB_37
#line 1076 "OCL.y"
            {  CurrentSemanticValue.oclliteral_ = new OCL.Absyn.LitBoolFalse();  }
#line default
        break;
      case 121: // SimpleTypeSpecifier -> PathName
#line 1078 "OCL.y"
                               {  CurrentSemanticValue.simpletypespecifier_ = new OCL.Absyn.STSpec(ValueStack[ValueStack.Depth-1].pathname_);  }
#line default
        break;
      case 122: // LiteralCollection -> CollectionKind, SYMB_22, ListCollectionItem, SYMB_23
#line 1080 "OCL.y"
                                                                      {  CurrentSemanticValue.literalcollection_ = new OCL.Absyn.LCollection(ValueStack[ValueStack.Depth-4].collectionkind_,ValueStack[ValueStack.Depth-2].listcollectionitem_);  }
#line default
        break;
      case 123: // LiteralCollection -> CollectionKind, SYMB_22, SYMB_23
#line 1081 "OCL.y"
                                   {  CurrentSemanticValue.literalcollection_ = new OCL.Absyn.LCollectionEmpty(ValueStack[ValueStack.Depth-3].collectionkind_);  }
#line default
        break;
      case 124: // ListCollectionItem -> CollectionItem
#line 1083 "OCL.y"
                                    {  CurrentSemanticValue.listcollectionitem_ = new OCL.Absyn.ListCollectionItem(); CurrentSemanticValue.listcollectionitem_.Add(ValueStack[ValueStack.Depth-1].collectionitem_);  }
#line default
        break;
      case 125: // ListCollectionItem -> CollectionItem, SYMB_14, ListCollectionItem
#line 1084 "OCL.y"
                                              {  CurrentSemanticValue.listcollectionitem_ = ValueStack[ValueStack.Depth-1].listcollectionitem_; ValueStack[ValueStack.Depth-1].listcollectionitem_.Insert(0, ValueStack[ValueStack.Depth-3].collectionitem_);  }
#line default
        break;
      case 126: // CollectionItem -> Expression
#line 1086 "OCL.y"
                            {  CurrentSemanticValue.collectionitem_ = new OCL.Absyn.CI(ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 127: // CollectionItem -> Expression, SYMB_24, Expression
#line 1087 "OCL.y"
                                  {  CurrentSemanticValue.collectionitem_ = new OCL.Absyn.CIRange(ValueStack[ValueStack.Depth-3].expression_,ValueStack[ValueStack.Depth-1].expression_);  }
#line default
        break;
      case 128: // OCLNumber -> INTEGER_
#line 1089 "OCL.y"
                     {  CurrentSemanticValue.oclnumber_ = new OCL.Absyn.NumInt(ValueStack[ValueStack.Depth-1].int_);  }
#line default
        break;
      case 129: // OCLNumber -> DOUBLE_
#line 1090 "OCL.y"
            {  CurrentSemanticValue.oclnumber_ = new OCL.Absyn.NumDouble(ValueStack[ValueStack.Depth-1].double_);  }
#line default
        break;
      case 130: // LogicalOperator -> SYMB_31
#line 1092 "OCL.y"
                          {  CurrentSemanticValue.logicaloperator_ = new OCL.Absyn.LAnd();  }
#line default
        break;
      case 131: // LogicalOperator -> SYMB_45
#line 1093 "OCL.y"
            {  CurrentSemanticValue.logicaloperator_ = new OCL.Absyn.LOr();  }
#line default
        break;
      case 132: // LogicalOperator -> SYMB_51
#line 1094 "OCL.y"
            {  CurrentSemanticValue.logicaloperator_ = new OCL.Absyn.LXor();  }
#line default
        break;
      case 133: // CollectionKind -> SYMB_30
#line 1096 "OCL.y"
                         {  CurrentSemanticValue.collectionkind_ = new OCL.Absyn.Set();  }
#line default
        break;
      case 134: // CollectionKind -> SYMB_27
#line 1097 "OCL.y"
            {  CurrentSemanticValue.collectionkind_ = new OCL.Absyn.Bag();  }
#line default
        break;
      case 135: // CollectionKind -> SYMB_29
#line 1098 "OCL.y"
            {  CurrentSemanticValue.collectionkind_ = new OCL.Absyn.Sequence();  }
#line default
        break;
      case 136: // CollectionKind -> SYMB_28
#line 1099 "OCL.y"
            {  CurrentSemanticValue.collectionkind_ = new OCL.Absyn.Collection();  }
#line default
        break;
      case 137: // EqualityOperator -> SYMB_4
#line 1101 "OCL.y"
                          {  CurrentSemanticValue.equalityoperator_ = new OCL.Absyn.EEq();  }
#line default
        break;
      case 138: // EqualityOperator -> SYMB_13
#line 1102 "OCL.y"
            {  CurrentSemanticValue.equalityoperator_ = new OCL.Absyn.ENEq();  }
#line default
        break;
      case 139: // RelationalOperator -> SYMB_9
#line 1104 "OCL.y"
                            {  CurrentSemanticValue.relationaloperator_ = new OCL.Absyn.RGT();  }
#line default
        break;
      case 140: // RelationalOperator -> SYMB_10
#line 1105 "OCL.y"
            {  CurrentSemanticValue.relationaloperator_ = new OCL.Absyn.RGTE();  }
#line default
        break;
      case 141: // RelationalOperator -> SYMB_7
#line 1106 "OCL.y"
           {  CurrentSemanticValue.relationaloperator_ = new OCL.Absyn.RLT();  }
#line default
        break;
      case 142: // RelationalOperator -> SYMB_8
#line 1107 "OCL.y"
           {  CurrentSemanticValue.relationaloperator_ = new OCL.Absyn.RLTE();  }
#line default
        break;
      case 143: // AddOperator -> SYMB_5
#line 1109 "OCL.y"
                     {  CurrentSemanticValue.addoperator_ = new OCL.Absyn.AAdd();  }
#line default
        break;
      case 144: // AddOperator -> SYMB_6
#line 1110 "OCL.y"
           {  CurrentSemanticValue.addoperator_ = new OCL.Absyn.ASub();  }
#line default
        break;
      case 145: // MultiplyOperator -> SYMB_12
#line 1112 "OCL.y"
                           {  CurrentSemanticValue.multiplyoperator_ = new OCL.Absyn.MMult();  }
#line default
        break;
      case 146: // MultiplyOperator -> SYMB_11
#line 1113 "OCL.y"
            {  CurrentSemanticValue.multiplyoperator_ = new OCL.Absyn.MDiv();  }
#line default
        break;
      case 147: // UnaryOperator -> SYMB_6
#line 1115 "OCL.y"
                       {  CurrentSemanticValue.unaryoperator_ = new OCL.Absyn.UMin();  }
#line default
        break;
      case 148: // UnaryOperator -> SYMB_43
#line 1116 "OCL.y"
            {  CurrentSemanticValue.unaryoperator_ = new OCL.Absyn.UNot();  }
#line default
        break;
      case 149: // PostfixOperator -> SYMB_25
#line 1118 "OCL.y"
                          {  CurrentSemanticValue.postfixoperator_ = new OCL.Absyn.PDot();  }
#line default
        break;
      case 150: // PostfixOperator -> SYMB_26
#line 1119 "OCL.y"
            {  CurrentSemanticValue.postfixoperator_ = new OCL.Absyn.PArrow();  }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
