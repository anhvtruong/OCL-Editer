//C# Abstract Syntax Interface generated by the BNF Converter.
using System;
using System.Collections.Generic;
namespace OCL.Absyn
{
  #region Token Classes
  public class TokenBaseType
  {
    private string str;
    
    public TokenBaseType(string str)
    {
      this.str = str;
    }
    
    public override string ToString()
    {
      return this.str;
    }
  }
  
  #endregion
  
  #region Abstract Syntax Classes
  public abstract class OCLfile
  {
    public abstract R Accept<R,A>(OCL.Absyn.OCLfile.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.OCLf p, A arg);
    }
  }
 
  public abstract class OCLPackage
  {
    public abstract R Accept<R,A>(OCL.Absyn.OCLPackage.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.Pack p, A arg);
    }
  }
 
  public abstract class PackageName
  {
    public abstract R Accept<R,A>(OCL.Absyn.PackageName.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.PackName p, A arg);
    }
  }
 
  public abstract class OCLExpressions
  {
    public abstract R Accept<R,A>(OCL.Absyn.OCLExpressions.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.Constraints p, A arg);
    }
  }
 
  public abstract class Constrnt
  {
    public abstract R Accept<R,A>(OCL.Absyn.Constrnt.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.Constr p, A arg);
    }
  }
 
  public abstract class ConstrBody
  {
    public abstract R Accept<R,A>(OCL.Absyn.ConstrBody.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.CBDefNamed p, A arg);
      R Visit(OCL.Absyn.CBDef p, A arg);
      R Visit(OCL.Absyn.CBNamed p, A arg);
      R Visit(OCL.Absyn.CB p, A arg);
    }
  }
 
  public abstract class ContextDeclaration
  {
    public abstract R Accept<R,A>(OCL.Absyn.ContextDeclaration.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.CDOper p, A arg);
      R Visit(OCL.Absyn.CDClassif p, A arg);
    }
  }
 
  public abstract class ClassifierContext
  {
    public abstract R Accept<R,A>(OCL.Absyn.ClassifierContext.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.CCType p, A arg);
      R Visit(OCL.Absyn.CC p, A arg);
    }
  }
 
  public abstract class OperationContext
  {
    public abstract R Accept<R,A>(OCL.Absyn.OperationContext.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.OpC p, A arg);
      R Visit(OCL.Absyn.OpCRT p, A arg);
    }
  }
 
  public abstract class Stereotype
  {
    public abstract R Accept<R,A>(OCL.Absyn.Stereotype.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.Pre p, A arg);
      R Visit(OCL.Absyn.Post p, A arg);
      R Visit(OCL.Absyn.Inv p, A arg);
    }
  }
 
  public abstract class OperationName
  {
    public abstract R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.OpName p, A arg);
      R Visit(OCL.Absyn.Eq p, A arg);
      R Visit(OCL.Absyn.Add p, A arg);
      R Visit(OCL.Absyn.Sub p, A arg);
      R Visit(OCL.Absyn.LST p, A arg);
      R Visit(OCL.Absyn.LSTE p, A arg);
      R Visit(OCL.Absyn.GRT p, A arg);
      R Visit(OCL.Absyn.GRTE p, A arg);
      R Visit(OCL.Absyn.Div p, A arg);
      R Visit(OCL.Absyn.Mult p, A arg);
      R Visit(OCL.Absyn.NEq p, A arg);
      R Visit(OCL.Absyn.Impl p, A arg);
      R Visit(OCL.Absyn.Not p, A arg);
      R Visit(OCL.Absyn.Or p, A arg);
      R Visit(OCL.Absyn.Xor p, A arg);
      R Visit(OCL.Absyn.And p, A arg);
    }
  }
 
  public abstract class FormalParameter
  {
    public abstract R Accept<R,A>(OCL.Absyn.FormalParameter.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.FP p, A arg);
    }
  }
 
  public abstract class TypeSpecifier
  {
    public abstract R Accept<R,A>(OCL.Absyn.TypeSpecifier.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.TSsimple p, A arg);
      R Visit(OCL.Absyn.TScoll p, A arg);
    }
  }
 
  public abstract class CollectionType
  {
    public abstract R Accept<R,A>(OCL.Absyn.CollectionType.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.CT p, A arg);
    }
  }
 
  public abstract class ReturnType
  {
    public abstract R Accept<R,A>(OCL.Absyn.ReturnType.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.RT p, A arg);
    }
  }
 
  public abstract class OCLExpression
  {
    public abstract R Accept<R,A>(OCL.Absyn.OCLExpression.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.OCLExp p, A arg);
      R Visit(OCL.Absyn.OCLExpLet p, A arg);
    }
  }
 
  public abstract class LetExpression
  {
    public abstract R Accept<R,A>(OCL.Absyn.LetExpression.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.LENoParam p, A arg);
      R Visit(OCL.Absyn.LENoParamType p, A arg);
      R Visit(OCL.Absyn.LE p, A arg);
      R Visit(OCL.Absyn.LEType p, A arg);
    }
  }
 
  public abstract class IfExpression
  {
    public abstract R Accept<R,A>(OCL.Absyn.IfExpression.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.IfExp p, A arg);
    }
  }
 
  public abstract class Expression
  {
    public abstract R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.EOpImpl p, A arg);
      R Visit(OCL.Absyn.EOpLog p, A arg);
      R Visit(OCL.Absyn.EOpEq p, A arg);
      R Visit(OCL.Absyn.EOpRel p, A arg);
      R Visit(OCL.Absyn.EOpAdd p, A arg);
      R Visit(OCL.Absyn.EOpMul p, A arg);
      R Visit(OCL.Absyn.EOpUn p, A arg);
      R Visit(OCL.Absyn.EExplPropCall p, A arg);
      R Visit(OCL.Absyn.EMessage p, A arg);
      R Visit(OCL.Absyn.EImplPropCall p, A arg);
      R Visit(OCL.Absyn.ELitColl p, A arg);
      R Visit(OCL.Absyn.ELit p, A arg);
      R Visit(OCL.Absyn.EIfExp p, A arg);
      R Visit(OCL.Absyn.ENull p, A arg);
    }
  }
 
  public abstract class MessageArg
  {
    public abstract R Accept<R,A>(OCL.Absyn.MessageArg.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.MAExpr p, A arg);
      R Visit(OCL.Absyn.MAUnspec p, A arg);
      R Visit(OCL.Absyn.MAUnspecTyped p, A arg);
    }
  }
 
  public abstract class PropertyCall
  {
    public abstract R Accept<R,A>(OCL.Absyn.PropertyCall.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.PCall p, A arg);
    }
  }
 
  public abstract class PathName
  {
    public abstract R Accept<R,A>(OCL.Absyn.PathName.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.PathN p, A arg);
    }
  }
 
  public abstract class PName
  {
    public abstract R Accept<R,A>(OCL.Absyn.PName.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.PN p, A arg);
    }
  }
 
  public abstract class PossQualifiers
  {
    public abstract R Accept<R,A>(OCL.Absyn.PossQualifiers.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.NoQual p, A arg);
      R Visit(OCL.Absyn.Qual p, A arg);
    }
  }
 
  public abstract class Qualifiers
  {
    public abstract R Accept<R,A>(OCL.Absyn.Qualifiers.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.Quals p, A arg);
    }
  }
 
  public abstract class PossTimeExpression
  {
    public abstract R Accept<R,A>(OCL.Absyn.PossTimeExpression.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.NoTE p, A arg);
      R Visit(OCL.Absyn.AtPre p, A arg);
    }
  }
 
  public abstract class PossPropCallParam
  {
    public abstract R Accept<R,A>(OCL.Absyn.PossPropCallParam.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.NoPCP p, A arg);
      R Visit(OCL.Absyn.PCPs p, A arg);
    }
  }
 
  public abstract class Declarator
  {
    public abstract R Accept<R,A>(OCL.Absyn.Declarator.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.Decl p, A arg);
      R Visit(OCL.Absyn.DeclAcc p, A arg);
    }
  }
 
  public abstract class DeclaratorVarList
  {
    public abstract R Accept<R,A>(OCL.Absyn.DeclaratorVarList.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.DVL p, A arg);
      R Visit(OCL.Absyn.DVLType p, A arg);
    }
  }
 
  public abstract class PropertyCallParameters
  {
    public abstract R Accept<R,A>(OCL.Absyn.PropertyCallParameters.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.PCPDecl p, A arg);
      R Visit(OCL.Absyn.PCP p, A arg);
      R Visit(OCL.Absyn.PCPNoDeclNoParam p, A arg);
      R Visit(OCL.Absyn.PCPConcrete p, A arg);
    }
  }
 
  public abstract class PCPHelper
  {
    public abstract R Accept<R,A>(OCL.Absyn.PCPHelper.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.PCPComma p, A arg);
      R Visit(OCL.Absyn.PCPColon p, A arg);
      R Visit(OCL.Absyn.PCPIterate p, A arg);
      R Visit(OCL.Absyn.PCPBar p, A arg);
    }
  }
 
  public abstract class OCLLiteral
  {
    public abstract R Accept<R,A>(OCL.Absyn.OCLLiteral.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.LitStr p, A arg);
      R Visit(OCL.Absyn.LitNum p, A arg);
      R Visit(OCL.Absyn.LitBoolTrue p, A arg);
      R Visit(OCL.Absyn.LitBoolFalse p, A arg);
    }
  }
 
  public abstract class SimpleTypeSpecifier
  {
    public abstract R Accept<R,A>(OCL.Absyn.SimpleTypeSpecifier.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.STSpec p, A arg);
    }
  }
 
  public abstract class LiteralCollection
  {
    public abstract R Accept<R,A>(OCL.Absyn.LiteralCollection.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.LCollection p, A arg);
      R Visit(OCL.Absyn.LCollectionEmpty p, A arg);
    }
  }
 
  public abstract class CollectionItem
  {
    public abstract R Accept<R,A>(OCL.Absyn.CollectionItem.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.CI p, A arg);
      R Visit(OCL.Absyn.CIRange p, A arg);
    }
  }
 
  public abstract class OCLNumber
  {
    public abstract R Accept<R,A>(OCL.Absyn.OCLNumber.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.NumInt p, A arg);
      R Visit(OCL.Absyn.NumDouble p, A arg);
    }
  }
 
  public abstract class LogicalOperator
  {
    public abstract R Accept<R,A>(OCL.Absyn.LogicalOperator.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.LAnd p, A arg);
      R Visit(OCL.Absyn.LOr p, A arg);
      R Visit(OCL.Absyn.LXor p, A arg);
    }
  }
 
  public abstract class CollectionKind
  {
    public abstract R Accept<R,A>(OCL.Absyn.CollectionKind.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.Set p, A arg);
      R Visit(OCL.Absyn.Bag p, A arg);
      R Visit(OCL.Absyn.Sequence p, A arg);
      R Visit(OCL.Absyn.Collection p, A arg);
    }
  }
 
  public abstract class EqualityOperator
  {
    public abstract R Accept<R,A>(OCL.Absyn.EqualityOperator.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.EEq p, A arg);
      R Visit(OCL.Absyn.ENEq p, A arg);
    }
  }
 
  public abstract class RelationalOperator
  {
    public abstract R Accept<R,A>(OCL.Absyn.RelationalOperator.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.RGT p, A arg);
      R Visit(OCL.Absyn.RGTE p, A arg);
      R Visit(OCL.Absyn.RLT p, A arg);
      R Visit(OCL.Absyn.RLTE p, A arg);
    }
  }
 
  public abstract class AddOperator
  {
    public abstract R Accept<R,A>(OCL.Absyn.AddOperator.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.AAdd p, A arg);
      R Visit(OCL.Absyn.ASub p, A arg);
    }
  }
 
  public abstract class MultiplyOperator
  {
    public abstract R Accept<R,A>(OCL.Absyn.MultiplyOperator.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.MMult p, A arg);
      R Visit(OCL.Absyn.MDiv p, A arg);
    }
  }
 
  public abstract class UnaryOperator
  {
    public abstract R Accept<R,A>(OCL.Absyn.UnaryOperator.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.UMin p, A arg);
      R Visit(OCL.Absyn.UNot p, A arg);
    }
  }
 
  public abstract class PostfixOperator
  {
    public abstract R Accept<R,A>(OCL.Absyn.PostfixOperator.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(OCL.Absyn.PDot p, A arg);
      R Visit(OCL.Absyn.PArrow p, A arg);
    }
  }
  
  public class OCLf : OCL.Absyn.OCLfile
  {
    private OCL.Absyn.ListOCLPackage listoclpackage_;

    public OCLf(OCL.Absyn.ListOCLPackage p1)
    {
      listoclpackage_ = p1;
    }
    
    public OCL.Absyn.ListOCLPackage ListOCLPackage_
    {
      get
      {
        return this.listoclpackage_;
      }
      set
      {
        this.listoclpackage_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.OCLf)
      {
        return this.Equals((OCL.Absyn.OCLf)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.OCLf obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ListOCLPackage_.Equals(obj.ListOCLPackage_);
    }
    
    public override int GetHashCode()
    {
      return ListOCLPackage_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLfile.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Pack : OCL.Absyn.OCLPackage
  {
    private OCL.Absyn.PackageName packagename_;
    private OCL.Absyn.OCLExpressions oclexpressions_;

    public Pack(OCL.Absyn.PackageName p1, OCL.Absyn.OCLExpressions p2)
    {
      packagename_ = p1;
      oclexpressions_ = p2;
    }
    
    public OCL.Absyn.PackageName PackageName_
    {
      get
      {
        return this.packagename_;
      }
      set
      {
        this.packagename_ = value;
      }
    }
    
    public OCL.Absyn.OCLExpressions OCLExpressions_
    {
      get
      {
        return this.oclexpressions_;
      }
      set
      {
        this.oclexpressions_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Pack)
      {
        return this.Equals((OCL.Absyn.Pack)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Pack obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.PackageName_.Equals(obj.PackageName_) && this.OCLExpressions_.Equals(obj.OCLExpressions_);
    }
    
    public override int GetHashCode()
    {
      return 37*(PackageName_.GetHashCode())+this.OCLExpressions_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLPackage.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PackName : OCL.Absyn.PackageName
  {
    private OCL.Absyn.PathName pathname_;

    public PackName(OCL.Absyn.PathName p1)
    {
      pathname_ = p1;
    }
    
    public OCL.Absyn.PathName PathName_
    {
      get
      {
        return this.pathname_;
      }
      set
      {
        this.pathname_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PackName)
      {
        return this.Equals((OCL.Absyn.PackName)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PackName obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.PathName_.Equals(obj.PathName_);
    }
    
    public override int GetHashCode()
    {
      return PathName_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PackageName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Constraints : OCL.Absyn.OCLExpressions
  {
    private OCL.Absyn.ListConstrnt listconstrnt_;

    public Constraints(OCL.Absyn.ListConstrnt p1)
    {
      listconstrnt_ = p1;
    }
    
    public OCL.Absyn.ListConstrnt ListConstrnt_
    {
      get
      {
        return this.listconstrnt_;
      }
      set
      {
        this.listconstrnt_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Constraints)
      {
        return this.Equals((OCL.Absyn.Constraints)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Constraints obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ListConstrnt_.Equals(obj.ListConstrnt_);
    }
    
    public override int GetHashCode()
    {
      return ListConstrnt_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLExpressions.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Constr : OCL.Absyn.Constrnt
  {
    private OCL.Absyn.ContextDeclaration contextdeclaration_;
    private OCL.Absyn.ListConstrBody listconstrbody_;

    public Constr(OCL.Absyn.ContextDeclaration p1, OCL.Absyn.ListConstrBody p2)
    {
      contextdeclaration_ = p1;
      listconstrbody_ = p2;
    }
    
    public OCL.Absyn.ContextDeclaration ContextDeclaration_
    {
      get
      {
        return this.contextdeclaration_;
      }
      set
      {
        this.contextdeclaration_ = value;
      }
    }
    
    public OCL.Absyn.ListConstrBody ListConstrBody_
    {
      get
      {
        return this.listconstrbody_;
      }
      set
      {
        this.listconstrbody_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Constr)
      {
        return this.Equals((OCL.Absyn.Constr)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Constr obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ContextDeclaration_.Equals(obj.ContextDeclaration_) && this.ListConstrBody_.Equals(obj.ListConstrBody_);
    }
    
    public override int GetHashCode()
    {
      return 37*(ContextDeclaration_.GetHashCode())+this.ListConstrBody_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Constrnt.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CBDefNamed : OCL.Absyn.ConstrBody
  {
    private string ident_;
    private OCL.Absyn.ListLetExpression listletexpression_;

    public CBDefNamed(string p1, OCL.Absyn.ListLetExpression p2)
    {
      ident_ = p1;
      listletexpression_ = p2;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.ListLetExpression ListLetExpression_
    {
      get
      {
        return this.listletexpression_;
      }
      set
      {
        this.listletexpression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CBDefNamed)
      {
        return this.Equals((OCL.Absyn.CBDefNamed)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CBDefNamed obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.ListLetExpression_.Equals(obj.ListLetExpression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(Ident_.GetHashCode())+this.ListLetExpression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.ConstrBody.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CBDef : OCL.Absyn.ConstrBody
  {
    private OCL.Absyn.ListLetExpression listletexpression_;

    public CBDef(OCL.Absyn.ListLetExpression p1)
    {
      listletexpression_ = p1;
    }
    
    public OCL.Absyn.ListLetExpression ListLetExpression_
    {
      get
      {
        return this.listletexpression_;
      }
      set
      {
        this.listletexpression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CBDef)
      {
        return this.Equals((OCL.Absyn.CBDef)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CBDef obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ListLetExpression_.Equals(obj.ListLetExpression_);
    }
    
    public override int GetHashCode()
    {
      return ListLetExpression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.ConstrBody.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CBNamed : OCL.Absyn.ConstrBody
  {
    private OCL.Absyn.Stereotype stereotype_;
    private string ident_;
    private OCL.Absyn.OCLExpression oclexpression_;

    public CBNamed(OCL.Absyn.Stereotype p1, string p2, OCL.Absyn.OCLExpression p3)
    {
      stereotype_ = p1;
      ident_ = p2;
      oclexpression_ = p3;
    }
    
    public OCL.Absyn.Stereotype Stereotype_
    {
      get
      {
        return this.stereotype_;
      }
      set
      {
        this.stereotype_ = value;
      }
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.OCLExpression OCLExpression_
    {
      get
      {
        return this.oclexpression_;
      }
      set
      {
        this.oclexpression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CBNamed)
      {
        return this.Equals((OCL.Absyn.CBNamed)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CBNamed obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Stereotype_.Equals(obj.Stereotype_) && this.Ident_.Equals(obj.Ident_) && this.OCLExpression_.Equals(obj.OCLExpression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Stereotype_.GetHashCode())+this.Ident_.GetHashCode())+this.OCLExpression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.ConstrBody.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CB : OCL.Absyn.ConstrBody
  {
    private OCL.Absyn.Stereotype stereotype_;
    private OCL.Absyn.OCLExpression oclexpression_;

    public CB(OCL.Absyn.Stereotype p1, OCL.Absyn.OCLExpression p2)
    {
      stereotype_ = p1;
      oclexpression_ = p2;
    }
    
    public OCL.Absyn.Stereotype Stereotype_
    {
      get
      {
        return this.stereotype_;
      }
      set
      {
        this.stereotype_ = value;
      }
    }
    
    public OCL.Absyn.OCLExpression OCLExpression_
    {
      get
      {
        return this.oclexpression_;
      }
      set
      {
        this.oclexpression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CB)
      {
        return this.Equals((OCL.Absyn.CB)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CB obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Stereotype_.Equals(obj.Stereotype_) && this.OCLExpression_.Equals(obj.OCLExpression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(Stereotype_.GetHashCode())+this.OCLExpression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.ConstrBody.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CDOper : OCL.Absyn.ContextDeclaration
  {
    private OCL.Absyn.OperationContext operationcontext_;

    public CDOper(OCL.Absyn.OperationContext p1)
    {
      operationcontext_ = p1;
    }
    
    public OCL.Absyn.OperationContext OperationContext_
    {
      get
      {
        return this.operationcontext_;
      }
      set
      {
        this.operationcontext_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CDOper)
      {
        return this.Equals((OCL.Absyn.CDOper)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CDOper obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.OperationContext_.Equals(obj.OperationContext_);
    }
    
    public override int GetHashCode()
    {
      return OperationContext_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.ContextDeclaration.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CDClassif : OCL.Absyn.ContextDeclaration
  {
    private OCL.Absyn.ClassifierContext classifiercontext_;

    public CDClassif(OCL.Absyn.ClassifierContext p1)
    {
      classifiercontext_ = p1;
    }
    
    public OCL.Absyn.ClassifierContext ClassifierContext_
    {
      get
      {
        return this.classifiercontext_;
      }
      set
      {
        this.classifiercontext_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CDClassif)
      {
        return this.Equals((OCL.Absyn.CDClassif)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CDClassif obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ClassifierContext_.Equals(obj.ClassifierContext_);
    }
    
    public override int GetHashCode()
    {
      return ClassifierContext_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.ContextDeclaration.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CCType : OCL.Absyn.ClassifierContext
  {
    private string ident_1;
    private string ident_2;

    public CCType(string p1, string p2)
    {
      ident_1 = p1;
      ident_2 = p2;
    }
    
    public string Ident_1
    {
      get
      {
        return this.ident_1;
      }
      set
      {
        this.ident_1 = value;
      }
    }
    
    public string Ident_2
    {
      get
      {
        return this.ident_2;
      }
      set
      {
        this.ident_2 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CCType)
      {
        return this.Equals((OCL.Absyn.CCType)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CCType obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_1.Equals(obj.Ident_1) && this.Ident_2.Equals(obj.Ident_2);
    }
    
    public override int GetHashCode()
    {
      return 37*(Ident_1.GetHashCode())+this.Ident_2.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.ClassifierContext.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CC : OCL.Absyn.ClassifierContext
  {
    private string ident_;

    public CC(string p1)
    {
      ident_ = p1;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CC)
      {
        return this.Equals((OCL.Absyn.CC)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CC obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_);
    }
    
    public override int GetHashCode()
    {
      return Ident_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.ClassifierContext.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class OpC : OCL.Absyn.OperationContext
  {
    private string ident_;
    private OCL.Absyn.OperationName operationname_;
    private OCL.Absyn.ListFormalParameter listformalparameter_;

    public OpC(string p1, OCL.Absyn.OperationName p2, OCL.Absyn.ListFormalParameter p3)
    {
      ident_ = p1;
      operationname_ = p2;
      listformalparameter_ = p3;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.OperationName OperationName_
    {
      get
      {
        return this.operationname_;
      }
      set
      {
        this.operationname_ = value;
      }
    }
    
    public OCL.Absyn.ListFormalParameter ListFormalParameter_
    {
      get
      {
        return this.listformalparameter_;
      }
      set
      {
        this.listformalparameter_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.OpC)
      {
        return this.Equals((OCL.Absyn.OpC)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.OpC obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.OperationName_.Equals(obj.OperationName_) && this.ListFormalParameter_.Equals(obj.ListFormalParameter_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Ident_.GetHashCode())+this.OperationName_.GetHashCode())+this.ListFormalParameter_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationContext.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class OpCRT : OCL.Absyn.OperationContext
  {
    private string ident_;
    private OCL.Absyn.OperationName operationname_;
    private OCL.Absyn.ListFormalParameter listformalparameter_;
    private OCL.Absyn.ReturnType returntype_;

    public OpCRT(string p1, OCL.Absyn.OperationName p2, OCL.Absyn.ListFormalParameter p3, OCL.Absyn.ReturnType p4)
    {
      ident_ = p1;
      operationname_ = p2;
      listformalparameter_ = p3;
      returntype_ = p4;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.OperationName OperationName_
    {
      get
      {
        return this.operationname_;
      }
      set
      {
        this.operationname_ = value;
      }
    }
    
    public OCL.Absyn.ListFormalParameter ListFormalParameter_
    {
      get
      {
        return this.listformalparameter_;
      }
      set
      {
        this.listformalparameter_ = value;
      }
    }
    
    public OCL.Absyn.ReturnType ReturnType_
    {
      get
      {
        return this.returntype_;
      }
      set
      {
        this.returntype_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.OpCRT)
      {
        return this.Equals((OCL.Absyn.OpCRT)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.OpCRT obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.OperationName_.Equals(obj.OperationName_) && this.ListFormalParameter_.Equals(obj.ListFormalParameter_) && this.ReturnType_.Equals(obj.ReturnType_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(37*(Ident_.GetHashCode())+this.OperationName_.GetHashCode())+this.ListFormalParameter_.GetHashCode())+this.ReturnType_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationContext.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Pre : OCL.Absyn.Stereotype
  {
    public Pre()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Pre)
      {
        return this.Equals((OCL.Absyn.Pre)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Pre obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.Stereotype.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Post : OCL.Absyn.Stereotype
  {
    public Post()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Post)
      {
        return this.Equals((OCL.Absyn.Post)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Post obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.Stereotype.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Inv : OCL.Absyn.Stereotype
  {
    public Inv()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Inv)
      {
        return this.Equals((OCL.Absyn.Inv)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Inv obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.Stereotype.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class OpName : OCL.Absyn.OperationName
  {
    private string ident_;

    public OpName(string p1)
    {
      ident_ = p1;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.OpName)
      {
        return this.Equals((OCL.Absyn.OpName)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.OpName obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_);
    }
    
    public override int GetHashCode()
    {
      return Ident_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Eq : OCL.Absyn.OperationName
  {
    public Eq()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Eq)
      {
        return this.Equals((OCL.Absyn.Eq)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Eq obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Add : OCL.Absyn.OperationName
  {
    public Add()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Add)
      {
        return this.Equals((OCL.Absyn.Add)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Add obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Sub : OCL.Absyn.OperationName
  {
    public Sub()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Sub)
      {
        return this.Equals((OCL.Absyn.Sub)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Sub obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LST : OCL.Absyn.OperationName
  {
    public LST()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LST)
      {
        return this.Equals((OCL.Absyn.LST)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LST obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LSTE : OCL.Absyn.OperationName
  {
    public LSTE()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LSTE)
      {
        return this.Equals((OCL.Absyn.LSTE)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LSTE obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class GRT : OCL.Absyn.OperationName
  {
    public GRT()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.GRT)
      {
        return this.Equals((OCL.Absyn.GRT)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.GRT obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class GRTE : OCL.Absyn.OperationName
  {
    public GRTE()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.GRTE)
      {
        return this.Equals((OCL.Absyn.GRTE)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.GRTE obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Div : OCL.Absyn.OperationName
  {
    public Div()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Div)
      {
        return this.Equals((OCL.Absyn.Div)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Div obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Mult : OCL.Absyn.OperationName
  {
    public Mult()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Mult)
      {
        return this.Equals((OCL.Absyn.Mult)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Mult obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class NEq : OCL.Absyn.OperationName
  {
    public NEq()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.NEq)
      {
        return this.Equals((OCL.Absyn.NEq)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.NEq obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Impl : OCL.Absyn.OperationName
  {
    public Impl()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Impl)
      {
        return this.Equals((OCL.Absyn.Impl)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Impl obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Not : OCL.Absyn.OperationName
  {
    public Not()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Not)
      {
        return this.Equals((OCL.Absyn.Not)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Not obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Or : OCL.Absyn.OperationName
  {
    public Or()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Or)
      {
        return this.Equals((OCL.Absyn.Or)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Or obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Xor : OCL.Absyn.OperationName
  {
    public Xor()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Xor)
      {
        return this.Equals((OCL.Absyn.Xor)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Xor obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class And : OCL.Absyn.OperationName
  {
    public And()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.And)
      {
        return this.Equals((OCL.Absyn.And)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.And obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OperationName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class FP : OCL.Absyn.FormalParameter
  {
    private string ident_;
    private OCL.Absyn.TypeSpecifier typespecifier_;

    public FP(string p1, OCL.Absyn.TypeSpecifier p2)
    {
      ident_ = p1;
      typespecifier_ = p2;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.TypeSpecifier TypeSpecifier_
    {
      get
      {
        return this.typespecifier_;
      }
      set
      {
        this.typespecifier_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.FP)
      {
        return this.Equals((OCL.Absyn.FP)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.FP obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.TypeSpecifier_.Equals(obj.TypeSpecifier_);
    }
    
    public override int GetHashCode()
    {
      return 37*(Ident_.GetHashCode())+this.TypeSpecifier_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.FormalParameter.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class TSsimple : OCL.Absyn.TypeSpecifier
  {
    private OCL.Absyn.SimpleTypeSpecifier simpletypespecifier_;

    public TSsimple(OCL.Absyn.SimpleTypeSpecifier p1)
    {
      simpletypespecifier_ = p1;
    }
    
    public OCL.Absyn.SimpleTypeSpecifier SimpleTypeSpecifier_
    {
      get
      {
        return this.simpletypespecifier_;
      }
      set
      {
        this.simpletypespecifier_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.TSsimple)
      {
        return this.Equals((OCL.Absyn.TSsimple)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.TSsimple obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.SimpleTypeSpecifier_.Equals(obj.SimpleTypeSpecifier_);
    }
    
    public override int GetHashCode()
    {
      return SimpleTypeSpecifier_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.TypeSpecifier.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class TScoll : OCL.Absyn.TypeSpecifier
  {
    private OCL.Absyn.CollectionType collectiontype_;

    public TScoll(OCL.Absyn.CollectionType p1)
    {
      collectiontype_ = p1;
    }
    
    public OCL.Absyn.CollectionType CollectionType_
    {
      get
      {
        return this.collectiontype_;
      }
      set
      {
        this.collectiontype_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.TScoll)
      {
        return this.Equals((OCL.Absyn.TScoll)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.TScoll obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.CollectionType_.Equals(obj.CollectionType_);
    }
    
    public override int GetHashCode()
    {
      return CollectionType_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.TypeSpecifier.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CT : OCL.Absyn.CollectionType
  {
    private OCL.Absyn.CollectionKind collectionkind_;
    private OCL.Absyn.SimpleTypeSpecifier simpletypespecifier_;

    public CT(OCL.Absyn.CollectionKind p1, OCL.Absyn.SimpleTypeSpecifier p2)
    {
      collectionkind_ = p1;
      simpletypespecifier_ = p2;
    }
    
    public OCL.Absyn.CollectionKind CollectionKind_
    {
      get
      {
        return this.collectionkind_;
      }
      set
      {
        this.collectionkind_ = value;
      }
    }
    
    public OCL.Absyn.SimpleTypeSpecifier SimpleTypeSpecifier_
    {
      get
      {
        return this.simpletypespecifier_;
      }
      set
      {
        this.simpletypespecifier_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CT)
      {
        return this.Equals((OCL.Absyn.CT)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CT obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.CollectionKind_.Equals(obj.CollectionKind_) && this.SimpleTypeSpecifier_.Equals(obj.SimpleTypeSpecifier_);
    }
    
    public override int GetHashCode()
    {
      return 37*(CollectionKind_.GetHashCode())+this.SimpleTypeSpecifier_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.CollectionType.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class RT : OCL.Absyn.ReturnType
  {
    private OCL.Absyn.TypeSpecifier typespecifier_;

    public RT(OCL.Absyn.TypeSpecifier p1)
    {
      typespecifier_ = p1;
    }
    
    public OCL.Absyn.TypeSpecifier TypeSpecifier_
    {
      get
      {
        return this.typespecifier_;
      }
      set
      {
        this.typespecifier_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.RT)
      {
        return this.Equals((OCL.Absyn.RT)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.RT obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.TypeSpecifier_.Equals(obj.TypeSpecifier_);
    }
    
    public override int GetHashCode()
    {
      return TypeSpecifier_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.ReturnType.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class OCLExp : OCL.Absyn.OCLExpression
  {
    private OCL.Absyn.Expression expression_;

    public OCLExp(OCL.Absyn.Expression p1)
    {
      expression_ = p1;
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.OCLExp)
      {
        return this.Equals((OCL.Absyn.OCLExp)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.OCLExp obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLExpression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class OCLExpLet : OCL.Absyn.OCLExpression
  {
    private OCL.Absyn.ListLetExpression listletexpression_;
    private OCL.Absyn.Expression expression_;

    public OCLExpLet(OCL.Absyn.ListLetExpression p1, OCL.Absyn.Expression p2)
    {
      listletexpression_ = p1;
      expression_ = p2;
    }
    
    public OCL.Absyn.ListLetExpression ListLetExpression_
    {
      get
      {
        return this.listletexpression_;
      }
      set
      {
        this.listletexpression_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.OCLExpLet)
      {
        return this.Equals((OCL.Absyn.OCLExpLet)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.OCLExpLet obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ListLetExpression_.Equals(obj.ListLetExpression_) && this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(ListLetExpression_.GetHashCode())+this.Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLExpression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LENoParam : OCL.Absyn.LetExpression
  {
    private string ident_;
    private OCL.Absyn.Expression expression_;

    public LENoParam(string p1, OCL.Absyn.Expression p2)
    {
      ident_ = p1;
      expression_ = p2;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LENoParam)
      {
        return this.Equals((OCL.Absyn.LENoParam)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LENoParam obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(Ident_.GetHashCode())+this.Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.LetExpression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LENoParamType : OCL.Absyn.LetExpression
  {
    private string ident_;
    private OCL.Absyn.TypeSpecifier typespecifier_;
    private OCL.Absyn.Expression expression_;

    public LENoParamType(string p1, OCL.Absyn.TypeSpecifier p2, OCL.Absyn.Expression p3)
    {
      ident_ = p1;
      typespecifier_ = p2;
      expression_ = p3;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.TypeSpecifier TypeSpecifier_
    {
      get
      {
        return this.typespecifier_;
      }
      set
      {
        this.typespecifier_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LENoParamType)
      {
        return this.Equals((OCL.Absyn.LENoParamType)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LENoParamType obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.TypeSpecifier_.Equals(obj.TypeSpecifier_) && this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Ident_.GetHashCode())+this.TypeSpecifier_.GetHashCode())+this.Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.LetExpression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LE : OCL.Absyn.LetExpression
  {
    private string ident_;
    private OCL.Absyn.ListFormalParameter listformalparameter_;
    private OCL.Absyn.Expression expression_;

    public LE(string p1, OCL.Absyn.ListFormalParameter p2, OCL.Absyn.Expression p3)
    {
      ident_ = p1;
      listformalparameter_ = p2;
      expression_ = p3;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.ListFormalParameter ListFormalParameter_
    {
      get
      {
        return this.listformalparameter_;
      }
      set
      {
        this.listformalparameter_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LE)
      {
        return this.Equals((OCL.Absyn.LE)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LE obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.ListFormalParameter_.Equals(obj.ListFormalParameter_) && this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Ident_.GetHashCode())+this.ListFormalParameter_.GetHashCode())+this.Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.LetExpression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LEType : OCL.Absyn.LetExpression
  {
    private string ident_;
    private OCL.Absyn.ListFormalParameter listformalparameter_;
    private OCL.Absyn.TypeSpecifier typespecifier_;
    private OCL.Absyn.Expression expression_;

    public LEType(string p1, OCL.Absyn.ListFormalParameter p2, OCL.Absyn.TypeSpecifier p3, OCL.Absyn.Expression p4)
    {
      ident_ = p1;
      listformalparameter_ = p2;
      typespecifier_ = p3;
      expression_ = p4;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.ListFormalParameter ListFormalParameter_
    {
      get
      {
        return this.listformalparameter_;
      }
      set
      {
        this.listformalparameter_ = value;
      }
    }
    
    public OCL.Absyn.TypeSpecifier TypeSpecifier_
    {
      get
      {
        return this.typespecifier_;
      }
      set
      {
        this.typespecifier_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LEType)
      {
        return this.Equals((OCL.Absyn.LEType)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LEType obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.ListFormalParameter_.Equals(obj.ListFormalParameter_) && this.TypeSpecifier_.Equals(obj.TypeSpecifier_) && this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(37*(Ident_.GetHashCode())+this.ListFormalParameter_.GetHashCode())+this.TypeSpecifier_.GetHashCode())+this.Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.LetExpression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class IfExp : OCL.Absyn.IfExpression
  {
    private OCL.Absyn.Expression expression_1;
    private OCL.Absyn.Expression expression_2;
    private OCL.Absyn.Expression expression_3;

    public IfExp(OCL.Absyn.Expression p1, OCL.Absyn.Expression p2, OCL.Absyn.Expression p3)
    {
      expression_1 = p1;
      expression_2 = p2;
      expression_3 = p3;
    }
    
    public OCL.Absyn.Expression Expression_1
    {
      get
      {
        return this.expression_1;
      }
      set
      {
        this.expression_1 = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_2
    {
      get
      {
        return this.expression_2;
      }
      set
      {
        this.expression_2 = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_3
    {
      get
      {
        return this.expression_3;
      }
      set
      {
        this.expression_3 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.IfExp)
      {
        return this.Equals((OCL.Absyn.IfExp)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.IfExp obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_1.Equals(obj.Expression_1) && this.Expression_2.Equals(obj.Expression_2) && this.Expression_3.Equals(obj.Expression_3);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Expression_1.GetHashCode())+this.Expression_2.GetHashCode())+this.Expression_3.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.IfExpression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EOpImpl : OCL.Absyn.Expression
  {
    private OCL.Absyn.Expression expression_1;
    private OCL.Absyn.Expression expression_2;

    public EOpImpl(OCL.Absyn.Expression p1, OCL.Absyn.Expression p2)
    {
      expression_1 = p1;
      expression_2 = p2;
    }
    
    public OCL.Absyn.Expression Expression_1
    {
      get
      {
        return this.expression_1;
      }
      set
      {
        this.expression_1 = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_2
    {
      get
      {
        return this.expression_2;
      }
      set
      {
        this.expression_2 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EOpImpl)
      {
        return this.Equals((OCL.Absyn.EOpImpl)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EOpImpl obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_1.Equals(obj.Expression_1) && this.Expression_2.Equals(obj.Expression_2);
    }
    
    public override int GetHashCode()
    {
      return 37*(Expression_1.GetHashCode())+this.Expression_2.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EOpLog : OCL.Absyn.Expression
  {
    private OCL.Absyn.Expression expression_1;
    private OCL.Absyn.LogicalOperator logicaloperator_;
    private OCL.Absyn.Expression expression_2;

    public EOpLog(OCL.Absyn.Expression p1, OCL.Absyn.LogicalOperator p2, OCL.Absyn.Expression p3)
    {
      expression_1 = p1;
      logicaloperator_ = p2;
      expression_2 = p3;
    }
    
    public OCL.Absyn.Expression Expression_1
    {
      get
      {
        return this.expression_1;
      }
      set
      {
        this.expression_1 = value;
      }
    }
    
    public OCL.Absyn.LogicalOperator LogicalOperator_
    {
      get
      {
        return this.logicaloperator_;
      }
      set
      {
        this.logicaloperator_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_2
    {
      get
      {
        return this.expression_2;
      }
      set
      {
        this.expression_2 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EOpLog)
      {
        return this.Equals((OCL.Absyn.EOpLog)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EOpLog obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_1.Equals(obj.Expression_1) && this.LogicalOperator_.Equals(obj.LogicalOperator_) && this.Expression_2.Equals(obj.Expression_2);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Expression_1.GetHashCode())+this.LogicalOperator_.GetHashCode())+this.Expression_2.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EOpEq : OCL.Absyn.Expression
  {
    private OCL.Absyn.Expression expression_1;
    private OCL.Absyn.EqualityOperator equalityoperator_;
    private OCL.Absyn.Expression expression_2;

    public EOpEq(OCL.Absyn.Expression p1, OCL.Absyn.EqualityOperator p2, OCL.Absyn.Expression p3)
    {
      expression_1 = p1;
      equalityoperator_ = p2;
      expression_2 = p3;
    }
    
    public OCL.Absyn.Expression Expression_1
    {
      get
      {
        return this.expression_1;
      }
      set
      {
        this.expression_1 = value;
      }
    }
    
    public OCL.Absyn.EqualityOperator EqualityOperator_
    {
      get
      {
        return this.equalityoperator_;
      }
      set
      {
        this.equalityoperator_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_2
    {
      get
      {
        return this.expression_2;
      }
      set
      {
        this.expression_2 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EOpEq)
      {
        return this.Equals((OCL.Absyn.EOpEq)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EOpEq obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_1.Equals(obj.Expression_1) && this.EqualityOperator_.Equals(obj.EqualityOperator_) && this.Expression_2.Equals(obj.Expression_2);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Expression_1.GetHashCode())+this.EqualityOperator_.GetHashCode())+this.Expression_2.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EOpRel : OCL.Absyn.Expression
  {
    private OCL.Absyn.Expression expression_1;
    private OCL.Absyn.RelationalOperator relationaloperator_;
    private OCL.Absyn.Expression expression_2;

    public EOpRel(OCL.Absyn.Expression p1, OCL.Absyn.RelationalOperator p2, OCL.Absyn.Expression p3)
    {
      expression_1 = p1;
      relationaloperator_ = p2;
      expression_2 = p3;
    }
    
    public OCL.Absyn.Expression Expression_1
    {
      get
      {
        return this.expression_1;
      }
      set
      {
        this.expression_1 = value;
      }
    }
    
    public OCL.Absyn.RelationalOperator RelationalOperator_
    {
      get
      {
        return this.relationaloperator_;
      }
      set
      {
        this.relationaloperator_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_2
    {
      get
      {
        return this.expression_2;
      }
      set
      {
        this.expression_2 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EOpRel)
      {
        return this.Equals((OCL.Absyn.EOpRel)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EOpRel obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_1.Equals(obj.Expression_1) && this.RelationalOperator_.Equals(obj.RelationalOperator_) && this.Expression_2.Equals(obj.Expression_2);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Expression_1.GetHashCode())+this.RelationalOperator_.GetHashCode())+this.Expression_2.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EOpAdd : OCL.Absyn.Expression
  {
    private OCL.Absyn.Expression expression_1;
    private OCL.Absyn.AddOperator addoperator_;
    private OCL.Absyn.Expression expression_2;

    public EOpAdd(OCL.Absyn.Expression p1, OCL.Absyn.AddOperator p2, OCL.Absyn.Expression p3)
    {
      expression_1 = p1;
      addoperator_ = p2;
      expression_2 = p3;
    }
    
    public OCL.Absyn.Expression Expression_1
    {
      get
      {
        return this.expression_1;
      }
      set
      {
        this.expression_1 = value;
      }
    }
    
    public OCL.Absyn.AddOperator AddOperator_
    {
      get
      {
        return this.addoperator_;
      }
      set
      {
        this.addoperator_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_2
    {
      get
      {
        return this.expression_2;
      }
      set
      {
        this.expression_2 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EOpAdd)
      {
        return this.Equals((OCL.Absyn.EOpAdd)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EOpAdd obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_1.Equals(obj.Expression_1) && this.AddOperator_.Equals(obj.AddOperator_) && this.Expression_2.Equals(obj.Expression_2);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Expression_1.GetHashCode())+this.AddOperator_.GetHashCode())+this.Expression_2.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EOpMul : OCL.Absyn.Expression
  {
    private OCL.Absyn.Expression expression_1;
    private OCL.Absyn.MultiplyOperator multiplyoperator_;
    private OCL.Absyn.Expression expression_2;

    public EOpMul(OCL.Absyn.Expression p1, OCL.Absyn.MultiplyOperator p2, OCL.Absyn.Expression p3)
    {
      expression_1 = p1;
      multiplyoperator_ = p2;
      expression_2 = p3;
    }
    
    public OCL.Absyn.Expression Expression_1
    {
      get
      {
        return this.expression_1;
      }
      set
      {
        this.expression_1 = value;
      }
    }
    
    public OCL.Absyn.MultiplyOperator MultiplyOperator_
    {
      get
      {
        return this.multiplyoperator_;
      }
      set
      {
        this.multiplyoperator_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_2
    {
      get
      {
        return this.expression_2;
      }
      set
      {
        this.expression_2 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EOpMul)
      {
        return this.Equals((OCL.Absyn.EOpMul)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EOpMul obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_1.Equals(obj.Expression_1) && this.MultiplyOperator_.Equals(obj.MultiplyOperator_) && this.Expression_2.Equals(obj.Expression_2);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Expression_1.GetHashCode())+this.MultiplyOperator_.GetHashCode())+this.Expression_2.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EOpUn : OCL.Absyn.Expression
  {
    private OCL.Absyn.UnaryOperator unaryoperator_;
    private OCL.Absyn.Expression expression_;

    public EOpUn(OCL.Absyn.UnaryOperator p1, OCL.Absyn.Expression p2)
    {
      unaryoperator_ = p1;
      expression_ = p2;
    }
    
    public OCL.Absyn.UnaryOperator UnaryOperator_
    {
      get
      {
        return this.unaryoperator_;
      }
      set
      {
        this.unaryoperator_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EOpUn)
      {
        return this.Equals((OCL.Absyn.EOpUn)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EOpUn obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.UnaryOperator_.Equals(obj.UnaryOperator_) && this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(UnaryOperator_.GetHashCode())+this.Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EExplPropCall : OCL.Absyn.Expression
  {
    private OCL.Absyn.Expression expression_;
    private OCL.Absyn.PostfixOperator postfixoperator_;
    private OCL.Absyn.PropertyCall propertycall_;

    public EExplPropCall(OCL.Absyn.Expression p1, OCL.Absyn.PostfixOperator p2, OCL.Absyn.PropertyCall p3)
    {
      expression_ = p1;
      postfixoperator_ = p2;
      propertycall_ = p3;
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public OCL.Absyn.PostfixOperator PostfixOperator_
    {
      get
      {
        return this.postfixoperator_;
      }
      set
      {
        this.postfixoperator_ = value;
      }
    }
    
    public OCL.Absyn.PropertyCall PropertyCall_
    {
      get
      {
        return this.propertycall_;
      }
      set
      {
        this.propertycall_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EExplPropCall)
      {
        return this.Equals((OCL.Absyn.EExplPropCall)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EExplPropCall obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_.Equals(obj.Expression_) && this.PostfixOperator_.Equals(obj.PostfixOperator_) && this.PropertyCall_.Equals(obj.PropertyCall_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Expression_.GetHashCode())+this.PostfixOperator_.GetHashCode())+this.PropertyCall_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EMessage : OCL.Absyn.Expression
  {
    private OCL.Absyn.Expression expression_;
    private OCL.Absyn.PathName pathname_;
    private OCL.Absyn.ListMessageArg listmessagearg_;

    public EMessage(OCL.Absyn.Expression p1, OCL.Absyn.PathName p2, OCL.Absyn.ListMessageArg p3)
    {
      expression_ = p1;
      pathname_ = p2;
      listmessagearg_ = p3;
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public OCL.Absyn.PathName PathName_
    {
      get
      {
        return this.pathname_;
      }
      set
      {
        this.pathname_ = value;
      }
    }
    
    public OCL.Absyn.ListMessageArg ListMessageArg_
    {
      get
      {
        return this.listmessagearg_;
      }
      set
      {
        this.listmessagearg_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EMessage)
      {
        return this.Equals((OCL.Absyn.EMessage)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EMessage obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_.Equals(obj.Expression_) && this.PathName_.Equals(obj.PathName_) && this.ListMessageArg_.Equals(obj.ListMessageArg_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Expression_.GetHashCode())+this.PathName_.GetHashCode())+this.ListMessageArg_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EImplPropCall : OCL.Absyn.Expression
  {
    private OCL.Absyn.PropertyCall propertycall_;

    public EImplPropCall(OCL.Absyn.PropertyCall p1)
    {
      propertycall_ = p1;
    }
    
    public OCL.Absyn.PropertyCall PropertyCall_
    {
      get
      {
        return this.propertycall_;
      }
      set
      {
        this.propertycall_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EImplPropCall)
      {
        return this.Equals((OCL.Absyn.EImplPropCall)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EImplPropCall obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.PropertyCall_.Equals(obj.PropertyCall_);
    }
    
    public override int GetHashCode()
    {
      return PropertyCall_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class ELitColl : OCL.Absyn.Expression
  {
    private OCL.Absyn.LiteralCollection literalcollection_;

    public ELitColl(OCL.Absyn.LiteralCollection p1)
    {
      literalcollection_ = p1;
    }
    
    public OCL.Absyn.LiteralCollection LiteralCollection_
    {
      get
      {
        return this.literalcollection_;
      }
      set
      {
        this.literalcollection_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.ELitColl)
      {
        return this.Equals((OCL.Absyn.ELitColl)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.ELitColl obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.LiteralCollection_.Equals(obj.LiteralCollection_);
    }
    
    public override int GetHashCode()
    {
      return LiteralCollection_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class ELit : OCL.Absyn.Expression
  {
    private OCL.Absyn.OCLLiteral oclliteral_;

    public ELit(OCL.Absyn.OCLLiteral p1)
    {
      oclliteral_ = p1;
    }
    
    public OCL.Absyn.OCLLiteral OCLLiteral_
    {
      get
      {
        return this.oclliteral_;
      }
      set
      {
        this.oclliteral_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.ELit)
      {
        return this.Equals((OCL.Absyn.ELit)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.ELit obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.OCLLiteral_.Equals(obj.OCLLiteral_);
    }
    
    public override int GetHashCode()
    {
      return OCLLiteral_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EIfExp : OCL.Absyn.Expression
  {
    private OCL.Absyn.IfExpression ifexpression_;

    public EIfExp(OCL.Absyn.IfExpression p1)
    {
      ifexpression_ = p1;
    }
    
    public OCL.Absyn.IfExpression IfExpression_
    {
      get
      {
        return this.ifexpression_;
      }
      set
      {
        this.ifexpression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EIfExp)
      {
        return this.Equals((OCL.Absyn.EIfExp)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EIfExp obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.IfExpression_.Equals(obj.IfExpression_);
    }
    
    public override int GetHashCode()
    {
      return IfExpression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class ENull : OCL.Absyn.Expression
  {
    public ENull()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.ENull)
      {
        return this.Equals((OCL.Absyn.ENull)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.ENull obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.Expression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class MAExpr : OCL.Absyn.MessageArg
  {
    private OCL.Absyn.Expression expression_;

    public MAExpr(OCL.Absyn.Expression p1)
    {
      expression_ = p1;
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.MAExpr)
      {
        return this.Equals((OCL.Absyn.MAExpr)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.MAExpr obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.MessageArg.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class MAUnspec : OCL.Absyn.MessageArg
  {
    public MAUnspec()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.MAUnspec)
      {
        return this.Equals((OCL.Absyn.MAUnspec)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.MAUnspec obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.MessageArg.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class MAUnspecTyped : OCL.Absyn.MessageArg
  {
    private OCL.Absyn.TypeSpecifier typespecifier_;

    public MAUnspecTyped(OCL.Absyn.TypeSpecifier p1)
    {
      typespecifier_ = p1;
    }
    
    public OCL.Absyn.TypeSpecifier TypeSpecifier_
    {
      get
      {
        return this.typespecifier_;
      }
      set
      {
        this.typespecifier_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.MAUnspecTyped)
      {
        return this.Equals((OCL.Absyn.MAUnspecTyped)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.MAUnspecTyped obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.TypeSpecifier_.Equals(obj.TypeSpecifier_);
    }
    
    public override int GetHashCode()
    {
      return TypeSpecifier_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.MessageArg.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCall : OCL.Absyn.PropertyCall
  {
    private OCL.Absyn.PathName pathname_;
    private OCL.Absyn.PossTimeExpression posstimeexpression_;
    private OCL.Absyn.PossQualifiers possqualifiers_;
    private OCL.Absyn.PossPropCallParam posspropcallparam_;

    public PCall(OCL.Absyn.PathName p1, OCL.Absyn.PossTimeExpression p2, OCL.Absyn.PossQualifiers p3, OCL.Absyn.PossPropCallParam p4)
    {
      pathname_ = p1;
      posstimeexpression_ = p2;
      possqualifiers_ = p3;
      posspropcallparam_ = p4;
    }
    
    public OCL.Absyn.PathName PathName_
    {
      get
      {
        return this.pathname_;
      }
      set
      {
        this.pathname_ = value;
      }
    }
    
    public OCL.Absyn.PossTimeExpression PossTimeExpression_
    {
      get
      {
        return this.posstimeexpression_;
      }
      set
      {
        this.posstimeexpression_ = value;
      }
    }
    
    public OCL.Absyn.PossQualifiers PossQualifiers_
    {
      get
      {
        return this.possqualifiers_;
      }
      set
      {
        this.possqualifiers_ = value;
      }
    }
    
    public OCL.Absyn.PossPropCallParam PossPropCallParam_
    {
      get
      {
        return this.posspropcallparam_;
      }
      set
      {
        this.posspropcallparam_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCall)
      {
        return this.Equals((OCL.Absyn.PCall)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCall obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.PathName_.Equals(obj.PathName_) && this.PossTimeExpression_.Equals(obj.PossTimeExpression_) && this.PossQualifiers_.Equals(obj.PossQualifiers_) && this.PossPropCallParam_.Equals(obj.PossPropCallParam_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(37*(PathName_.GetHashCode())+this.PossTimeExpression_.GetHashCode())+this.PossQualifiers_.GetHashCode())+this.PossPropCallParam_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PropertyCall.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PathN : OCL.Absyn.PathName
  {
    private OCL.Absyn.ListPName listpname_;

    public PathN(OCL.Absyn.ListPName p1)
    {
      listpname_ = p1;
    }
    
    public OCL.Absyn.ListPName ListPName_
    {
      get
      {
        return this.listpname_;
      }
      set
      {
        this.listpname_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PathN)
      {
        return this.Equals((OCL.Absyn.PathN)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PathN obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ListPName_.Equals(obj.ListPName_);
    }
    
    public override int GetHashCode()
    {
      return ListPName_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PathName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PN : OCL.Absyn.PName
  {
    private string ident_;

    public PN(string p1)
    {
      ident_ = p1;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PN)
      {
        return this.Equals((OCL.Absyn.PN)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PN obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_);
    }
    
    public override int GetHashCode()
    {
      return Ident_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PName.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class NoQual : OCL.Absyn.PossQualifiers
  {
    public NoQual()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.NoQual)
      {
        return this.Equals((OCL.Absyn.NoQual)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.NoQual obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.PossQualifiers.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Qual : OCL.Absyn.PossQualifiers
  {
    private OCL.Absyn.Qualifiers qualifiers_;

    public Qual(OCL.Absyn.Qualifiers p1)
    {
      qualifiers_ = p1;
    }
    
    public OCL.Absyn.Qualifiers Qualifiers_
    {
      get
      {
        return this.qualifiers_;
      }
      set
      {
        this.qualifiers_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Qual)
      {
        return this.Equals((OCL.Absyn.Qual)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Qual obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Qualifiers_.Equals(obj.Qualifiers_);
    }
    
    public override int GetHashCode()
    {
      return Qualifiers_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PossQualifiers.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Quals : OCL.Absyn.Qualifiers
  {
    private OCL.Absyn.ListExpression listexpression_;

    public Quals(OCL.Absyn.ListExpression p1)
    {
      listexpression_ = p1;
    }
    
    public OCL.Absyn.ListExpression ListExpression_
    {
      get
      {
        return this.listexpression_;
      }
      set
      {
        this.listexpression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Quals)
      {
        return this.Equals((OCL.Absyn.Quals)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Quals obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ListExpression_.Equals(obj.ListExpression_);
    }
    
    public override int GetHashCode()
    {
      return ListExpression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Qualifiers.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class NoTE : OCL.Absyn.PossTimeExpression
  {
    public NoTE()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.NoTE)
      {
        return this.Equals((OCL.Absyn.NoTE)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.NoTE obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.PossTimeExpression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class AtPre : OCL.Absyn.PossTimeExpression
  {
    public AtPre()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.AtPre)
      {
        return this.Equals((OCL.Absyn.AtPre)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.AtPre obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.PossTimeExpression.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class NoPCP : OCL.Absyn.PossPropCallParam
  {
    public NoPCP()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.NoPCP)
      {
        return this.Equals((OCL.Absyn.NoPCP)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.NoPCP obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.PossPropCallParam.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCPs : OCL.Absyn.PossPropCallParam
  {
    private OCL.Absyn.PropertyCallParameters propertycallparameters_;

    public PCPs(OCL.Absyn.PropertyCallParameters p1)
    {
      propertycallparameters_ = p1;
    }
    
    public OCL.Absyn.PropertyCallParameters PropertyCallParameters_
    {
      get
      {
        return this.propertycallparameters_;
      }
      set
      {
        this.propertycallparameters_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCPs)
      {
        return this.Equals((OCL.Absyn.PCPs)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCPs obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.PropertyCallParameters_.Equals(obj.PropertyCallParameters_);
    }
    
    public override int GetHashCode()
    {
      return PropertyCallParameters_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PossPropCallParam.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Decl : OCL.Absyn.Declarator
  {
    private OCL.Absyn.DeclaratorVarList declaratorvarlist_;

    public Decl(OCL.Absyn.DeclaratorVarList p1)
    {
      declaratorvarlist_ = p1;
    }
    
    public OCL.Absyn.DeclaratorVarList DeclaratorVarList_
    {
      get
      {
        return this.declaratorvarlist_;
      }
      set
      {
        this.declaratorvarlist_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Decl)
      {
        return this.Equals((OCL.Absyn.Decl)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Decl obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.DeclaratorVarList_.Equals(obj.DeclaratorVarList_);
    }
    
    public override int GetHashCode()
    {
      return DeclaratorVarList_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Declarator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class DeclAcc : OCL.Absyn.Declarator
  {
    private OCL.Absyn.DeclaratorVarList declaratorvarlist_;
    private string ident_;
    private OCL.Absyn.TypeSpecifier typespecifier_;
    private OCL.Absyn.Expression expression_;

    public DeclAcc(OCL.Absyn.DeclaratorVarList p1, string p2, OCL.Absyn.TypeSpecifier p3, OCL.Absyn.Expression p4)
    {
      declaratorvarlist_ = p1;
      ident_ = p2;
      typespecifier_ = p3;
      expression_ = p4;
    }
    
    public OCL.Absyn.DeclaratorVarList DeclaratorVarList_
    {
      get
      {
        return this.declaratorvarlist_;
      }
      set
      {
        this.declaratorvarlist_ = value;
      }
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.TypeSpecifier TypeSpecifier_
    {
      get
      {
        return this.typespecifier_;
      }
      set
      {
        this.typespecifier_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.DeclAcc)
      {
        return this.Equals((OCL.Absyn.DeclAcc)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.DeclAcc obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.DeclaratorVarList_.Equals(obj.DeclaratorVarList_) && this.Ident_.Equals(obj.Ident_) && this.TypeSpecifier_.Equals(obj.TypeSpecifier_) && this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(37*(DeclaratorVarList_.GetHashCode())+this.Ident_.GetHashCode())+this.TypeSpecifier_.GetHashCode())+this.Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.Declarator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class DVL : OCL.Absyn.DeclaratorVarList
  {
    private OCL.Absyn.ListIdent listident_;

    public DVL(OCL.Absyn.ListIdent p1)
    {
      listident_ = p1;
    }
    
    public OCL.Absyn.ListIdent ListIdent_
    {
      get
      {
        return this.listident_;
      }
      set
      {
        this.listident_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.DVL)
      {
        return this.Equals((OCL.Absyn.DVL)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.DVL obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ListIdent_.Equals(obj.ListIdent_);
    }
    
    public override int GetHashCode()
    {
      return ListIdent_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.DeclaratorVarList.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class DVLType : OCL.Absyn.DeclaratorVarList
  {
    private OCL.Absyn.ListIdent listident_;
    private OCL.Absyn.SimpleTypeSpecifier simpletypespecifier_;

    public DVLType(OCL.Absyn.ListIdent p1, OCL.Absyn.SimpleTypeSpecifier p2)
    {
      listident_ = p1;
      simpletypespecifier_ = p2;
    }
    
    public OCL.Absyn.ListIdent ListIdent_
    {
      get
      {
        return this.listident_;
      }
      set
      {
        this.listident_ = value;
      }
    }
    
    public OCL.Absyn.SimpleTypeSpecifier SimpleTypeSpecifier_
    {
      get
      {
        return this.simpletypespecifier_;
      }
      set
      {
        this.simpletypespecifier_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.DVLType)
      {
        return this.Equals((OCL.Absyn.DVLType)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.DVLType obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ListIdent_.Equals(obj.ListIdent_) && this.SimpleTypeSpecifier_.Equals(obj.SimpleTypeSpecifier_);
    }
    
    public override int GetHashCode()
    {
      return 37*(ListIdent_.GetHashCode())+this.SimpleTypeSpecifier_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.DeclaratorVarList.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCPDecl : OCL.Absyn.PropertyCallParameters
  {
    private OCL.Absyn.Declarator declarator_;
    private OCL.Absyn.ListExpression listexpression_;

    public PCPDecl(OCL.Absyn.Declarator p1, OCL.Absyn.ListExpression p2)
    {
      declarator_ = p1;
      listexpression_ = p2;
    }
    
    public OCL.Absyn.Declarator Declarator_
    {
      get
      {
        return this.declarator_;
      }
      set
      {
        this.declarator_ = value;
      }
    }
    
    public OCL.Absyn.ListExpression ListExpression_
    {
      get
      {
        return this.listexpression_;
      }
      set
      {
        this.listexpression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCPDecl)
      {
        return this.Equals((OCL.Absyn.PCPDecl)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCPDecl obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Declarator_.Equals(obj.Declarator_) && this.ListExpression_.Equals(obj.ListExpression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(Declarator_.GetHashCode())+this.ListExpression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PropertyCallParameters.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCP : OCL.Absyn.PropertyCallParameters
  {
    private OCL.Absyn.ListExpression listexpression_;

    public PCP(OCL.Absyn.ListExpression p1)
    {
      listexpression_ = p1;
    }
    
    public OCL.Absyn.ListExpression ListExpression_
    {
      get
      {
        return this.listexpression_;
      }
      set
      {
        this.listexpression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCP)
      {
        return this.Equals((OCL.Absyn.PCP)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCP obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.ListExpression_.Equals(obj.ListExpression_);
    }
    
    public override int GetHashCode()
    {
      return ListExpression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PropertyCallParameters.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCPNoDeclNoParam : OCL.Absyn.PropertyCallParameters
  {
    public PCPNoDeclNoParam()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCPNoDeclNoParam)
      {
        return this.Equals((OCL.Absyn.PCPNoDeclNoParam)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCPNoDeclNoParam obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.PropertyCallParameters.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCPConcrete : OCL.Absyn.PropertyCallParameters
  {
    private OCL.Absyn.Expression expression_;
    private OCL.Absyn.ListPCPHelper listpcphelper_;

    public PCPConcrete(OCL.Absyn.Expression p1, OCL.Absyn.ListPCPHelper p2)
    {
      expression_ = p1;
      listpcphelper_ = p2;
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public OCL.Absyn.ListPCPHelper ListPCPHelper_
    {
      get
      {
        return this.listpcphelper_;
      }
      set
      {
        this.listpcphelper_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCPConcrete)
      {
        return this.Equals((OCL.Absyn.PCPConcrete)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCPConcrete obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_.Equals(obj.Expression_) && this.ListPCPHelper_.Equals(obj.ListPCPHelper_);
    }
    
    public override int GetHashCode()
    {
      return 37*(Expression_.GetHashCode())+this.ListPCPHelper_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PropertyCallParameters.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCPComma : OCL.Absyn.PCPHelper
  {
    private OCL.Absyn.Expression expression_;

    public PCPComma(OCL.Absyn.Expression p1)
    {
      expression_ = p1;
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCPComma)
      {
        return this.Equals((OCL.Absyn.PCPComma)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCPComma obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PCPHelper.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCPColon : OCL.Absyn.PCPHelper
  {
    private OCL.Absyn.SimpleTypeSpecifier simpletypespecifier_;

    public PCPColon(OCL.Absyn.SimpleTypeSpecifier p1)
    {
      simpletypespecifier_ = p1;
    }
    
    public OCL.Absyn.SimpleTypeSpecifier SimpleTypeSpecifier_
    {
      get
      {
        return this.simpletypespecifier_;
      }
      set
      {
        this.simpletypespecifier_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCPColon)
      {
        return this.Equals((OCL.Absyn.PCPColon)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCPColon obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.SimpleTypeSpecifier_.Equals(obj.SimpleTypeSpecifier_);
    }
    
    public override int GetHashCode()
    {
      return SimpleTypeSpecifier_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PCPHelper.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCPIterate : OCL.Absyn.PCPHelper
  {
    private string ident_;
    private OCL.Absyn.TypeSpecifier typespecifier_;
    private OCL.Absyn.Expression expression_;

    public PCPIterate(string p1, OCL.Absyn.TypeSpecifier p2, OCL.Absyn.Expression p3)
    {
      ident_ = p1;
      typespecifier_ = p2;
      expression_ = p3;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public OCL.Absyn.TypeSpecifier TypeSpecifier_
    {
      get
      {
        return this.typespecifier_;
      }
      set
      {
        this.typespecifier_ = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCPIterate)
      {
        return this.Equals((OCL.Absyn.PCPIterate)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCPIterate obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.TypeSpecifier_.Equals(obj.TypeSpecifier_) && this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return 37*(37*(Ident_.GetHashCode())+this.TypeSpecifier_.GetHashCode())+this.Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PCPHelper.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PCPBar : OCL.Absyn.PCPHelper
  {
    private OCL.Absyn.Expression expression_;

    public PCPBar(OCL.Absyn.Expression p1)
    {
      expression_ = p1;
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PCPBar)
      {
        return this.Equals((OCL.Absyn.PCPBar)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PCPBar obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.PCPHelper.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LitStr : OCL.Absyn.OCLLiteral
  {
    private string string_;

    public LitStr(string p1)
    {
      string_ = p1;
    }
    
    public string String_
    {
      get
      {
        return this.string_;
      }
      set
      {
        this.string_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LitStr)
      {
        return this.Equals((OCL.Absyn.LitStr)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LitStr obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.String_.Equals(obj.String_);
    }
    
    public override int GetHashCode()
    {
      return String_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLLiteral.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LitNum : OCL.Absyn.OCLLiteral
  {
    private OCL.Absyn.OCLNumber oclnumber_;

    public LitNum(OCL.Absyn.OCLNumber p1)
    {
      oclnumber_ = p1;
    }
    
    public OCL.Absyn.OCLNumber OCLNumber_
    {
      get
      {
        return this.oclnumber_;
      }
      set
      {
        this.oclnumber_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LitNum)
      {
        return this.Equals((OCL.Absyn.LitNum)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LitNum obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.OCLNumber_.Equals(obj.OCLNumber_);
    }
    
    public override int GetHashCode()
    {
      return OCLNumber_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLLiteral.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LitBoolTrue : OCL.Absyn.OCLLiteral
  {
    public LitBoolTrue()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LitBoolTrue)
      {
        return this.Equals((OCL.Absyn.LitBoolTrue)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LitBoolTrue obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLLiteral.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LitBoolFalse : OCL.Absyn.OCLLiteral
  {
    public LitBoolFalse()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LitBoolFalse)
      {
        return this.Equals((OCL.Absyn.LitBoolFalse)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LitBoolFalse obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLLiteral.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class STSpec : OCL.Absyn.SimpleTypeSpecifier
  {
    private OCL.Absyn.PathName pathname_;

    public STSpec(OCL.Absyn.PathName p1)
    {
      pathname_ = p1;
    }
    
    public OCL.Absyn.PathName PathName_
    {
      get
      {
        return this.pathname_;
      }
      set
      {
        this.pathname_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.STSpec)
      {
        return this.Equals((OCL.Absyn.STSpec)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.STSpec obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.PathName_.Equals(obj.PathName_);
    }
    
    public override int GetHashCode()
    {
      return PathName_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.SimpleTypeSpecifier.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LCollection : OCL.Absyn.LiteralCollection
  {
    private OCL.Absyn.CollectionKind collectionkind_;
    private OCL.Absyn.ListCollectionItem listcollectionitem_;

    public LCollection(OCL.Absyn.CollectionKind p1, OCL.Absyn.ListCollectionItem p2)
    {
      collectionkind_ = p1;
      listcollectionitem_ = p2;
    }
    
    public OCL.Absyn.CollectionKind CollectionKind_
    {
      get
      {
        return this.collectionkind_;
      }
      set
      {
        this.collectionkind_ = value;
      }
    }
    
    public OCL.Absyn.ListCollectionItem ListCollectionItem_
    {
      get
      {
        return this.listcollectionitem_;
      }
      set
      {
        this.listcollectionitem_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LCollection)
      {
        return this.Equals((OCL.Absyn.LCollection)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LCollection obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.CollectionKind_.Equals(obj.CollectionKind_) && this.ListCollectionItem_.Equals(obj.ListCollectionItem_);
    }
    
    public override int GetHashCode()
    {
      return 37*(CollectionKind_.GetHashCode())+this.ListCollectionItem_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.LiteralCollection.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LCollectionEmpty : OCL.Absyn.LiteralCollection
  {
    private OCL.Absyn.CollectionKind collectionkind_;

    public LCollectionEmpty(OCL.Absyn.CollectionKind p1)
    {
      collectionkind_ = p1;
    }
    
    public OCL.Absyn.CollectionKind CollectionKind_
    {
      get
      {
        return this.collectionkind_;
      }
      set
      {
        this.collectionkind_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LCollectionEmpty)
      {
        return this.Equals((OCL.Absyn.LCollectionEmpty)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LCollectionEmpty obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.CollectionKind_.Equals(obj.CollectionKind_);
    }
    
    public override int GetHashCode()
    {
      return CollectionKind_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.LiteralCollection.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CI : OCL.Absyn.CollectionItem
  {
    private OCL.Absyn.Expression expression_;

    public CI(OCL.Absyn.Expression p1)
    {
      expression_ = p1;
    }
    
    public OCL.Absyn.Expression Expression_
    {
      get
      {
        return this.expression_;
      }
      set
      {
        this.expression_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CI)
      {
        return this.Equals((OCL.Absyn.CI)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CI obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_.Equals(obj.Expression_);
    }
    
    public override int GetHashCode()
    {
      return Expression_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.CollectionItem.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class CIRange : OCL.Absyn.CollectionItem
  {
    private OCL.Absyn.Expression expression_1;
    private OCL.Absyn.Expression expression_2;

    public CIRange(OCL.Absyn.Expression p1, OCL.Absyn.Expression p2)
    {
      expression_1 = p1;
      expression_2 = p2;
    }
    
    public OCL.Absyn.Expression Expression_1
    {
      get
      {
        return this.expression_1;
      }
      set
      {
        this.expression_1 = value;
      }
    }
    
    public OCL.Absyn.Expression Expression_2
    {
      get
      {
        return this.expression_2;
      }
      set
      {
        this.expression_2 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.CIRange)
      {
        return this.Equals((OCL.Absyn.CIRange)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.CIRange obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Expression_1.Equals(obj.Expression_1) && this.Expression_2.Equals(obj.Expression_2);
    }
    
    public override int GetHashCode()
    {
      return 37*(Expression_1.GetHashCode())+this.Expression_2.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.CollectionItem.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class NumInt : OCL.Absyn.OCLNumber
  {
    private int integer_;

    public NumInt(int p1)
    {
      integer_ = p1;
    }
    
    public int Integer_
    {
      get
      {
        return this.integer_;
      }
      set
      {
        this.integer_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.NumInt)
      {
        return this.Equals((OCL.Absyn.NumInt)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.NumInt obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Integer_.Equals(obj.Integer_);
    }
    
    public override int GetHashCode()
    {
      return Integer_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLNumber.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class NumDouble : OCL.Absyn.OCLNumber
  {
    private double double_;

    public NumDouble(double p1)
    {
      double_ = p1;
    }
    
    public double Double_
    {
      get
      {
        return this.double_;
      }
      set
      {
        this.double_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.NumDouble)
      {
        return this.Equals((OCL.Absyn.NumDouble)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.NumDouble obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Double_.Equals(obj.Double_);
    }
    
    public override int GetHashCode()
    {
      return Double_.GetHashCode();
    }
    
    public override R Accept<R,A>(OCL.Absyn.OCLNumber.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LAnd : OCL.Absyn.LogicalOperator
  {
    public LAnd()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LAnd)
      {
        return this.Equals((OCL.Absyn.LAnd)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LAnd obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.LogicalOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LOr : OCL.Absyn.LogicalOperator
  {
    public LOr()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LOr)
      {
        return this.Equals((OCL.Absyn.LOr)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LOr obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.LogicalOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class LXor : OCL.Absyn.LogicalOperator
  {
    public LXor()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.LXor)
      {
        return this.Equals((OCL.Absyn.LXor)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.LXor obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.LogicalOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Set : OCL.Absyn.CollectionKind
  {
    public Set()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Set)
      {
        return this.Equals((OCL.Absyn.Set)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Set obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.CollectionKind.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Bag : OCL.Absyn.CollectionKind
  {
    public Bag()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Bag)
      {
        return this.Equals((OCL.Absyn.Bag)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Bag obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.CollectionKind.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Sequence : OCL.Absyn.CollectionKind
  {
    public Sequence()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Sequence)
      {
        return this.Equals((OCL.Absyn.Sequence)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Sequence obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.CollectionKind.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Collection : OCL.Absyn.CollectionKind
  {
    public Collection()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.Collection)
      {
        return this.Equals((OCL.Absyn.Collection)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.Collection obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.CollectionKind.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class EEq : OCL.Absyn.EqualityOperator
  {
    public EEq()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.EEq)
      {
        return this.Equals((OCL.Absyn.EEq)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.EEq obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.EqualityOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class ENEq : OCL.Absyn.EqualityOperator
  {
    public ENEq()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.ENEq)
      {
        return this.Equals((OCL.Absyn.ENEq)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.ENEq obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.EqualityOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class RGT : OCL.Absyn.RelationalOperator
  {
    public RGT()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.RGT)
      {
        return this.Equals((OCL.Absyn.RGT)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.RGT obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.RelationalOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class RGTE : OCL.Absyn.RelationalOperator
  {
    public RGTE()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.RGTE)
      {
        return this.Equals((OCL.Absyn.RGTE)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.RGTE obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.RelationalOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class RLT : OCL.Absyn.RelationalOperator
  {
    public RLT()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.RLT)
      {
        return this.Equals((OCL.Absyn.RLT)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.RLT obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.RelationalOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class RLTE : OCL.Absyn.RelationalOperator
  {
    public RLTE()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.RLTE)
      {
        return this.Equals((OCL.Absyn.RLTE)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.RLTE obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.RelationalOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class AAdd : OCL.Absyn.AddOperator
  {
    public AAdd()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.AAdd)
      {
        return this.Equals((OCL.Absyn.AAdd)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.AAdd obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.AddOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class ASub : OCL.Absyn.AddOperator
  {
    public ASub()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.ASub)
      {
        return this.Equals((OCL.Absyn.ASub)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.ASub obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.AddOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class MMult : OCL.Absyn.MultiplyOperator
  {
    public MMult()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.MMult)
      {
        return this.Equals((OCL.Absyn.MMult)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.MMult obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.MultiplyOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class MDiv : OCL.Absyn.MultiplyOperator
  {
    public MDiv()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.MDiv)
      {
        return this.Equals((OCL.Absyn.MDiv)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.MDiv obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.MultiplyOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class UMin : OCL.Absyn.UnaryOperator
  {
    public UMin()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.UMin)
      {
        return this.Equals((OCL.Absyn.UMin)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.UMin obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.UnaryOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class UNot : OCL.Absyn.UnaryOperator
  {
    public UNot()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.UNot)
      {
        return this.Equals((OCL.Absyn.UNot)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.UNot obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.UnaryOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PDot : OCL.Absyn.PostfixOperator
  {
    public PDot()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PDot)
      {
        return this.Equals((OCL.Absyn.PDot)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PDot obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.PostfixOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class PArrow : OCL.Absyn.PostfixOperator
  {
    public PArrow()
    {
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is OCL.Absyn.PArrow)
      {
        return this.Equals((OCL.Absyn.PArrow)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(OCL.Absyn.PArrow obj)
    {
      if(this == obj)
      {
        return true;
      }
      return true;
    }
    
    public override int GetHashCode()
    {
      return 37;
    }
    
    public override R Accept<R,A>(OCL.Absyn.PostfixOperator.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
  
  #region Lists
  public class ListOCLPackage : List<OCL.Absyn.OCLPackage>
  {
  }
 
  public class ListConstrnt : List<OCL.Absyn.Constrnt>
  {
  }
 
  public class ListConstrBody : List<OCL.Absyn.ConstrBody>
  {
  }
 
  public class ListFormalParameter : List<OCL.Absyn.FormalParameter>
  {
  }
 
  public class ListLetExpression : List<OCL.Absyn.LetExpression>
  {
  }
 
  public class ListMessageArg : List<OCL.Absyn.MessageArg>
  {
  }
 
  public class ListPName : List<OCL.Absyn.PName>
  {
  }
 
  public class ListIdent : List<string>
  {
  }
 
  public class ListExpression : List<OCL.Absyn.Expression>
  {
  }
 
  public class ListPCPHelper : List<OCL.Absyn.PCPHelper>
  {
  }
 
  public class ListCollectionItem : List<OCL.Absyn.CollectionItem>
  {
  }
  #endregion
  #endregion
}
